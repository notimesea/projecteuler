#include <bits/stdc++.h>

#define clr(x) memset((x), 0, sizeof(x))
#define all(x) (x).begin(), (x).end()
#define pb push_back
#define mp make_pair
#define in(x) int (x); input((x));
#define x first
#define y second
typedef int itn;

#define next next12345
#define prev prev12345
#define left lefdsf232
#define right rig43783
#define x1 x12345
#define y1 y12345

using namespace std;

template<typename T>
T gcd(T x, T y) {
    while (y > 0) {
        x %= y;
        swap(x, y);
    }
    return x;
}

template<class _T>
inline _T sqr(const _T &x) {
    return x * x;
}

template<class _T>
inline string tostr(const _T &a) {
    ostringstream os("");
    os << a;
    return os.str();
}

typedef long double ld;
typedef long long ll;
typedef unsigned long long ull;
typedef pair<int, int> PII;
const long double PI = 3.1415926535897932384626433832795L;

template<typename T>
inline void input(T &a) {
    static int ed;
    a = 0;
    while (!isdigit(ed = getchar()) && ed != '-') { }
    char neg = 0;
    if (ed == '-') {
        neg = 1;
        ed = getchar();
    }
    while (isdigit(ed)) {
        a = 10 * a + ed - '0';
        ed = getchar();
    }
    if (neg) a = -a;
}

template<typename T = int>
inline T nxt() {
    T res;
    input(res);
    return res;
}

mt19937 generator;

bool check(int v) {
    for (int i = 2; i * i <= v; ++i) {
        if (v % i == 0) {
            return false;
        }
    }
    return true;
}

long long pw(long long a, long long n, long long m) {
    ll res = 1;
    while (n) {
        if (n & 1ll) {
            res = res * a % m;
        }
        a = a * a % m;
        n >>= 1;
    }
    return res;
}


const int N = 1 << 25;

long long mul[N];
long long sum[N];

long long mod = 1000000007;

vector <pair <int, int> > events[N];


int f(int x) {
    int res = 1;
    for (int i = 2; i <= x; ++i) {
        if (x % i == 0) {
            int t = 1;
            while (x % i == 0) {
                x /= i;
                t *= i;
            }
            res *= t + 1;
        }
    }
    return res;
}

int degree[N];

int main() {
    //#define int long
#ifdef LOCAL
    freopen("input.txt", "r", stdin);
    //freopen("output.txt", "w", stdout);
#else
    #define fname "parts"
    //freopen(fname".in", "r", stdin);
    //freopen(fname".out", "w", stdout);
#endif
    int n = 10000000;

    long long x = 1, y = 1;


    for (int i = 2; i <= n; ++i) {
        if (i % 1000 == 0) cerr << i << endl;
        if (check(i)) {
            int p = i;

            int d = 0;
            int k = n;
            while (k /= p) {
                d += k;
            }
            degree[p] = d;

            x *= pw(p, d, mod);
            x %= mod;

            y *= pw(p, d, mod) + 1;
            y %= mod;

//            events[0].push_back(mp(p, d));

            for (int z = 0; z * p <= n; ++z) {
                int deg = 0;
                int zz = z;
                while (zz) {
                    deg += zz;
                    zz /= p;
                }
                int l = z * p, r = min(n + 1, l + p);
//                long long m = pw(p, deg, mod);

                events[l].push_back(mp(p, -deg));
                events[r].push_back(mp(p, deg));

                events[n + 1 - r].push_back(mp(p, -deg));
                events[n + 1 - l].push_back(mp(p, deg));
            }
        }
//        ans += sum[1] * mul[1];
//        ans %= mod;
    }


    long long ans = 0;

    int z = 1;

    for (int i = 0; i <= n; ++i) {
        if (i % 1000 == 0) cerr << i << endl;
        for (const auto & d : events[i]) {

//            assert(degree[d.x] >= 0);

            x *= pw(d.x, mod - 1 - degree[d.x], mod);
            x %= mod;

            if (degree[d.x] != 0) {
                y *= pw(pw(d.x, degree[d.x], mod) + 1, mod - 2, mod);
                y %= mod;
            }

            degree[d.x] += d.y;
            if (degree[d.x] < 0) {
                degree[d.x] += mod - 1;
            }
            if (degree[d.x] >= mod - 1) {
                degree[d.x] -= mod - 1;
            }

            assert(degree[d.x] >= 0);

            x *= pw(d.x, degree[d.x], mod);
            x %= mod;


            if (degree[d.x] != 0) {
                y *= pw(d.x, degree[d.x], mod) + 1;
                y %= mod;
            }

        }
//        if (i == 0 || i == n) {
//            cerr << i << " " << x << " " << y << "\n";
//            assert(x == 1);
//            assert(y == 1);
//        }
        ans += y - x;

//        cerr << z << " " << f(z) << "\n";
//        cerr << x << " " << y << "\n";

//        z *= n - i;
//        z /= i + 1;
    }

    ans %= mod;
    if (ans < 0) {
        ans += mod;
    }

    cout << ans << "\n";

#ifdef LOCAL
    cerr << "Time elapsed: " << 1.0 * clock() / CLOCKS_PER_SEC * 1000 << " ms." << endl;
#endif
    return 0;
}
