#include <bits/stdc++.h>

#define clr(x) memset((x), 0, sizeof(x))
#define all(x) (x).begin(), (x).end()
#define pb push_back
#define mp make_pair
#define in(x) int (x); input((x));
#define x first
#define y second
typedef int itn;

#define next next12345
#define prev prev12345
#define left lefdsf232
#define right rig43783
#define x1 x12345
#define y1 y12345

using namespace std;

template<typename T>
T gcd(T x, T y) {
    while (y > 0) {
        x %= y;
        swap(x, y);
    }
    return x;
}

template<class _T>
inline _T sqr(const _T &x) {
    return x * x;
}

template<class _T>
inline string tostr(const _T &a) {
    ostringstream os("");
    os << a;
    return os.str();
}

typedef long double ld;
typedef long long ll;
typedef unsigned long long ull;
typedef pair<int, int> PII;
const long double PI = 3.1415926535897932384626433832795L;

template<typename T>
inline void input(T &a) {
    static int ed;
    a = 0;
    while (!isdigit(ed = getchar()) && ed != '-') { }
    char neg = 0;
    if (ed == '-') {
        neg = 1;
        ed = getchar();
    }
    while (isdigit(ed)) {
        a = 10 * a + ed - '0';
        ed = getchar();
    }
    if (neg) a = -a;
}

template<typename T = int>
inline T nxt() {
    T res;
    input(res);
    return res;
}

mt19937 generator;

bool check(int v) {
    for (int i = 2; i * i <= v; ++i) {
        if (v % i == 0) {
            return false;
        }
    }
    return true;
}

long long pw(long long a, long long n, long long m) {
    ll res = 1;
    while (n) {
        if (n & 1ll) {
            res = res * a % m;
        }
        a = a * a % m;
        n >>= 1;
    }
    return res;
}

//int f(int n, int d) {
//    int res = 0;
//    for (int x = 1; x <= d; ++x) {
//        if (d % x == 0) {
//            res += mu[x] * (n / x);
//        }
//    }
//    return res;
//}
//
//int g(int n, int d) {
//    int res = 0;
//    for (int x = 1; x <= d; ++x) {
//        if (d % x == 0) {
//            res += x * mu[x] * ((n / x) * (n / x + 1) / 2);
//        }
//    }
//    return res;
//}

const int N = 10000000 + 1;

int lp[N];

long long mod = 1000000007;

const int K = 50;

int primes[K];


//counts number of relatively primes number upto n to d
long long f(long long n, int d) {
    int sz = 0;
    while (d > 1) {
        int l = lp[d];
        while (lp[d] == l) {
            d /= l;
        }
        primes[sz++] = l;
    }

    long long res = 0;

    for (int mask = 0; mask < (1 << sz); ++mask) {
        int mu = 1;
        int prod = 1;

        for (int i = 0; i < sz; ++i) {
            if (mask & (1 << i)) {
                prod *= primes[i];
                mu *= -1;
            }
        }
        res += mu * (n / prod);
    }
    return res % mod;
}

//counts sum of relatively primes number upto n to d
long long g(long long n, int d) {
    int sz = 0;
    while (d > 1) {
        int l = lp[d];
        while (lp[d] == l) {
            d /= l;
        }
        primes[sz++] = l;
    }

    long long res = 0;

    for (int mask = 0; mask < (1 << sz); ++mask) {
        int mu = 1;
        int prod = 1;

        for (int i = 0; i < sz; ++i) {
            if (mask & (1 << i)) {
                prod *= primes[i];
                mu *= -1;
            }
        }
        long long t = n / prod % mod;
        res += mu * (t * (t + 1) / 2) % mod * prod; //carefully, there might be overflow
    }
    return res % mod;
}


int main() {
    //#define int long
#ifdef LOCAL
    freopen("input.txt", "r", stdin);
    //freopen("output.txt", "w", stdout);
#else
    #define fname "parts"
    //freopen(fname".in", "r", stdin);
    //freopen(fname".out", "w", stdout);
#endif

    for (int i = 2; i < N; ++i) {
        if (!lp[i]) {
            for (int j = i; j < N; j += i) {
                lp[j] = i;
            }
        }
    }

    long long n = pw(10, 14, 1ll << 60);

    long long sq = sqrt(n) + 10;
    while (sq * sq > n) {
        --sq;
    }

    assert(sq < N);

    long long ans = 0;

    //sum of unitary divisors over all k <= n

    for (int d = 1; d <= sq; ++d) {
        ans += d * f(n / d, d) + (g(n / d, d) - g(sq, d));
        ans %= mod;
    }

    //should subtract n(n+1)/2

    long long x = n % mod;

    ans -= (x * (x + 1)) / 2;

    ans %= mod;
    if (ans < 0) {
        ans += mod;
    }

    cout << ans << "\n";




#ifdef LOCAL
    cerr << "Time elapsed: " << 1.0 * clock() / CLOCKS_PER_SEC * 1000 << " ms." << endl;
#endif
    return 0;
}
