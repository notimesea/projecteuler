#include <bits/stdc++.h>

#define clr(x) memset((x), 0, sizeof(x))
#define all(x) (x).begin(), (x).end()
#define pb push_back
#define mp make_pair
#define in(x) int (x); input((x));
#define x first
#define y second
typedef int itn;

#define next next12345
#define prev prev12345
#define left lefdsf232
#define right rig43783
#define x1 x12345
#define y1 y12345

using namespace std;

template<typename T>
T gcd(T x, T y) {
    while (y > 0) {
        x %= y;
        swap(x, y);
    }
    return x;
}

template<class _T>
inline _T sqr(const _T &x) {
    return x * x;
}

template<class _T>
inline string tostr(const _T &a) {
    ostringstream os("");
    os << a;
    return os.str();
}

typedef long double ld;
typedef long long ll;
typedef unsigned long long ull;
typedef pair<int, int> PII;
const long double PI = 3.1415926535897932384626433832795L;

template<typename T>
inline void input(T &a) {
    static int ed;
    a = 0;
    while (!isdigit(ed = getchar()) && ed != '-') { }
    char neg = 0;
    if (ed == '-') {
        neg = 1;
        ed = getchar();
    }
    while (isdigit(ed)) {
        a = 10 * a + ed - '0';
        ed = getchar();
    }
    if (neg) a = -a;
}

template<typename T = int>
inline T nxt() {
    T res;
    input(res);
    return res;
}

mt19937 generator;

bool check(int v) {
    for (int i = 2; i * i <= v; ++i) {
        if (v % i == 0) {
            return false;
        }
    }
    return true;
}

long long pw(long long a, long long n, long long m) {
    ll res = 1;
    while (n) {
        if (n & 1ll) {
            res = res * a % m;
        }
        a = a * a % m;
        n >>= 1;
    }
    return res;
}

long pow_mod(long x, long n, long p) {
    if (n == 0) return 1;
    if (n & 1)
        return (pow_mod(x, n-1, p) * x) % p;
    x = pow_mod(x, n/2, p);
    return (x * x) % p;
}

/* Takes as input an odd prime p and n < p and returns r
 * such that r * r = n [mod p]. */
long tonelli_shanks(long n, long p) {
    long s = 0;
    long q = p - 1;
    while ((q & 1) == 0) { q /= 2; ++s; }
    if (s == 1) {
        long r = pow_mod(n, (p+1)/4, p);
        if ((r * r) % p == n) return r;
        return 0;
    }
    // Find the first quadratic non-residue z by brute-force search
    long z = 1;
    while (pow_mod(++z, (p-1)/2, p) != p - 1);
    long c = pow_mod(z, q, p);
    long r = pow_mod(n, (q+1)/2, p);
    long t = pow_mod(n, q, p);
    long m = s;
    while (t != 1) {
        long tt = t;
        long i = 0;
        while (tt != 1) {
            tt = (tt * tt) % p;
            ++i;
            if (i == m) return 0;
        }
        long b = pow_mod(c, pow_mod(2, m-i-1, p-1), p);
        long b2 = (b * b) % p;
        r = (r * b) % p;
        t = (t * b2) % p;
        c = b2;
        m = i;
    }
    if ((r * r) % p == n) return r;
    return 0;
}

const int N = 10000000;

int lp[N];

int main() {
    //#define int long
#ifdef LOCAL
    freopen("input.txt", "r", stdin);
    //freopen("output.txt", "w", stdout);
#else
    #define fname "parts"
    //freopen(fname".in", "r", stdin);
    //freopen(fname".out", "w", stdout);
#endif

    long sum = 0;

    for (int i = 2; i < N; ++i) {
        if (!lp[i]) {
            for (int j = i; j < N; j += i) {
                lp[j] = i;
            }
            long p = i;
            if (i == 2) {
                continue;
            }
//            if (i == 13) {
//                for (int x = 1; x <= i * i; ++x) {
//                    if ((x * x - 3 * x - 1) % (i * i) == 0) {
//                        cerr << "FUCK\n";
//                        exit(0);
//                    }
//                }
//            }

            long r = tonelli_shanks(13 % p, p);
            if (r == 0) {
                continue;
            }

            long x1 = (3 - r + p) % p;
            long x2 = (3 + r) % p;
            if (x1 % 2) {
                x1 += p;
            }
            x1 /= 2;
            if (x2 % 2) {
                x2 += p;
            }
            x2 /= 2;

            cerr << p << " " << x1 << " " << x2 << "\n";

            assert((x1 * x1 - 3 * x1 - 1) % p == 0);
            assert((x2 * x2 - 3 * x2 - 1) % p == 0);

            assert((2 * x1 - 3) % p != 0);
            assert((2 * x2 - 3) % p != 0);

            x1 = x1 - p * ((x1 * x1 - 3 * x1 - 1) / p * pw((2 * x1 - 3 + p) % p, p - 2, p) % p);
            x2 = x2 - p * ((x2 * x2 - 3 * x2 - 1) / p * pw((2 * x2 - 3 + p) % p, p - 2, p) % p);

            x1 %= (p * p);
            x1 += (p * p);
            x1 %= (p * p);

            x2 %= (p * p);
            x2 += (p * p);
            x2 %= (p * p);

            sum += min(x1, x2);

//            assert((x1 * x1 - 3 * x1 - 1) % (p * p) == 0);
//            assert((x2 * x2 - 3 * x2 - 1) % (p * p) == 0);
        }
    }
    cout << sum << "\n";

#ifdef LOCAL
    cerr << "Time elapsed: " << 1.0 * clock() / CLOCKS_PER_SEC * 1000 << " ms." << endl;
#endif
    return 0;
}
