#include <bits/stdc++.h>

#define clr(x) memset((x), 0, sizeof(x))
#define all(x) (x).begin(), (x).end()
#define pb push_back
#define mp make_pair
#define in(x) int (x); input((x));
#define x first
#define y second
typedef int itn;

#define next next12345
#define prev prev12345
#define left lefdsf232
#define right rig43783
#define x1 x12345
#define y1 y12345

using namespace std;

template<typename T>
T gcd(T x, T y) {
    while (y > 0) {
        x %= y;
        swap(x, y);
    }
    return x;
}

template<class _T>
inline _T sqr(const _T &x) {
    return x * x;
}

template<class _T>
inline string tostr(const _T &a) {
    ostringstream os("");
    os << a;
    return os.str();
}

typedef long double ld;
typedef long long ll;
typedef unsigned long long ull;
typedef pair<int, int> PII;
const long double PI = 3.1415926535897932384626433832795L;

template<typename T>
inline void input(T &a) {
    static int ed;
    a = 0;
    while (!isdigit(ed = getchar()) && ed != '-') { }
    char neg = 0;
    if (ed == '-') {
        neg = 1;
        ed = getchar();
    }
    while (isdigit(ed)) {
        a = 10 * a + ed - '0';
        ed = getchar();
    }
    if (neg) a = -a;
}

template<typename T = int>
inline T nxt() {
    T res;
    input(res);
    return res;
}

mt19937 generator;

bool check(int v) {
    for (int i = 2; i * i <= v; ++i) {
        if (v % i == 0) {
            return false;
        }
    }
    return true;
}

long long pw(long long a, long long n, long long m) {
    ll res = 1;
    while (n) {
        if (n & 1ll) {
            res = res * a % m;
        }
        a = a * a % m;
        n >>= 1;
    }
    return res;
}

const int K = 7;

long long mod = 1000000000;

struct state {
    vector <int> last;

    int renumerate() {
        map <int, int> id;
        int sz = 0;
        for (int & i : last) {
            if (id.count(i)) {
                i = id[i];
            } else {
                id[i] = sz++;
                i = id[i];
            }
        }
        return id.size();
    }

    state go(int c) {
        state res;
        auto pos = find(all(last), c);
        if (pos == last.end()) {
            res.last = vector <int>(last.begin(), last.end());
        } else {
            res.last = vector <int>(pos + 1, last.end());
        }
        res.last.push_back(c);
        return res;
    }
};

int ans2;

int w[10000];

int x;

void rec(int pos) {
    int used[K];
    clr(used);
    for (int i = 0; i < K && i < pos; ++i) {
        used[w[pos - 1 - i]] = 1;
    }
    if (accumulate(used, used + K, 0) == K) {
        return;
    }
    if (pos == x) {
        ++ans2;
        return;
    }
    for (int i = 0; i < K; ++i) {
        w[pos] = i;
        rec(pos + 1);
    }
}

int main() {
    //#define int long
#ifdef LOCAL
    freopen("input.txt", "r", stdin);
    //freopen("output.txt", "w", stdout);
#else
    #define fname "parts"
    //freopen(fname".in", "r", stdin);
    //freopen(fname".out", "w", stdout);
#endif

    queue <vector <int> > q;
    q.push(vector <int>());

    map <vector <int>, int> id;
    int sz = 0;
    id[vector <int>()] = sz++;

    vector <int> g[100];

    while (!q.empty()) {
        vector <int> v = q.front();
        q.pop();
        state x = state{v};
        for (int i = 0; i < K; ++i) {
            auto to = x.go(i);
            if (to.renumerate() == K) continue;
            if (id.count(to.last)) {
                g[id[v]].push_back(id[to.last]);
                continue;
            }
//            for (int x : to.last) {
//                cout << x << " ";
//            }
//            cout << "\n";
            g[id[v]].push_back(sz);
            id[to.last] = sz++;
            q.push(to.last);
        }
    }

    cerr << "OK\n";

    map <int, int> dp;
    dp[id[vector <int>()]] = 1;

//    int x = 7;
//    for (int i = 0; i < x; ++i) {
//        map <int, int> tmp;
//        for (auto v : dp) {
//            for (int to : g[v.x]) {
//                tmp[to] += v.y;
//            }
//        }
//        dp = tmp;
//    }
//
//    int ans = 0;
//    for (auto v : dp) {
//        ans += v.y;
//    }
//    cout << ans << "\n";
//
//    rec(0);
//
//    cout << ans2 << "\n";

    long long a[sz][sz];
    clr(a);

    for (int i = 0; i < sz; ++i) {
        for (int to : g[i]) {
            a[to][i] += 1;
        }
    }

    long long res[sz];
    clr(res);

    res[0] = 1;

    long long x = pw(10, 12, 1ll << 60);

    while (x) {
        if (x & 1ll) {
            long long tmp[sz];
            clr(tmp);
            for (int i = 0; i < sz; ++i) {
                for (int j = 0; j < sz; ++j) {
                    tmp[i] += a[i][j] * res[j];
                    tmp[i] %= mod;
                }
            }
            memcpy(res, tmp, sizeof(res));
        }

        long long b[sz][sz];
        clr(b);
        for (int i = 0; i < sz; ++i) {
            for (int j = 0; j < sz; ++j) {
                for (int k = 0; k < sz; ++k) {
                    b[i][j] += a[i][k] * a[k][j];
                    b[i][j] %= mod;
                }
            }
        }
        memcpy(a, b, sizeof(a));
        x >>= 1;
    }

    cout << accumulate(res, res + sz, 0ll) % mod << "\n";

#ifdef LOCAL
    cerr << "Time elapsed: " << 1.0 * clock() / CLOCKS_PER_SEC * 1000 << " ms." << endl;
#endif
    return 0;
}
