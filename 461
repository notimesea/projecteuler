#include <bits/stdc++.h>

#define clr(x) memset((x), 0, sizeof(x))
#define all(x) (x).begin(), (x).end()
#define pb push_back
#define mp make_pair
#define in(x) int (x); input((x));
#define x first
#define y second
typedef int itn;

#define next next12345
#define prev prev12345
#define left lefdsf232
#define right rig43783
#define x1 x12345
#define y1 y12345

using namespace std;

template<typename T>
T gcd(T x, T y) {
    while (y > 0) {
        x %= y;
        swap(x, y);
    }
    return x;
}

template<class _T>
inline _T sqr(const _T &x) {
    return x * x;
}

template<class _T>
inline string tostr(const _T &a) {
    ostringstream os("");
    os << a;
    return os.str();
}

typedef long double ld;
typedef long long ll;
typedef unsigned long long ull;
typedef pair<int, int> PII;
const long double PI = 3.1415926535897932384626433832795L;

template<typename T>
inline void input(T &a) {
    static int ed;
    a = 0;
    while (!isdigit(ed = getchar()) && ed != '-') { }
    char neg = 0;
    if (ed == '-') {
        neg = 1;
        ed = getchar();
    }
    while (isdigit(ed)) {
        a = 10 * a + ed - '0';
        ed = getchar();
    }
    if (neg) a = -a;
}

template<typename T = int>
inline T nxt() {
    T res;
    input(res);
    return res;
}

mt19937 generator;

bool check(int v) {
    for (int i = 2; i * i <= v; ++i) {
        if (v % i == 0) {
            return false;
        }
    }
    return true;
}

long long pw(long long a, long long n, long long m) {
    ll res = 1;
    while (n) {
        if (n & 1ll) {
            res = res * a % m;
        }
        a = a * a % m;
        n >>= 1;
    }
    return res;
}



int main() {
    //#define int long
#ifdef LOCAL
    freopen("input.txt", "r", stdin);
    //freopen("output.txt", "w", stdout);
#else
#define fname "parts"
    //freopen(fname".in", "r", stdin);
    //freopen(fname".out", "w", stdout);
#endif

//#define ld __float128

    int n = 10000;

    ld s1, s2;

    ld eps = 1e-8;

    vector <pair <ld, int> > q;

    ld need = PI;

    for (int i = 0; (s1 = expm1l(1.0L * i / n)) < need + eps; ++i) {
        for (int j = 0; s1 + (s2 = expm1l(1.0L * j / n)) < need + eps; ++j) {
            q.emplace_back(s1 + s2, i * i + j * j);
        }
    }
    cerr << q.size() << "\n";
    sort(all(q));
    cerr << "SORTED\n";

    ld best = 1;
    int ans = -1;

    int j = (int)q.size() - 1;
    for (int i = 0; i < q.size(); ++i) {
        while (j >= 0 && q[j].x + q[i].x > need) {
            if (abs(q[j].x + q[i].x - need) < best) {
                best = abs(q[j].x + q[i].x - need);
                ans = q[i].y + q[j].y;
            }
            --j;
        }
        if (j >= 0) {
            if (abs(q[j].x + q[i].x - need) < best) {
                best = abs(q[j].x + q[i].x - need);
                ans = q[i].y + q[j].y;
            }
        }
    }
    cout << setprecision(20) << fixed;
    cout << fabs(expm1l(6.0 / 200) + expm1l(75.0 / 200) + expm1l(89.0 / 200) + expm1l(226.0 / 200) - PI) << endl;

    cout << (double)best << " " << ans << "\n";



#ifdef LOCAL
    cerr << "Time elapsed: " << 1.0 * clock() / CLOCKS_PER_SEC * 1000 << " ms." << endl;
#endif
    return 0;
}
