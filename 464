#include <bits/stdc++.h>

#define clr(x) memset((x), 0, sizeof(x))
#define all(x) (x).begin(), (x).end()
#define pb push_back
#define mp make_pair
#define in(x) int (x); input((x));
#define x first
#define y second
typedef int itn;

#define next next12345
#define prev prev12345
#define left lefdsf232
#define right rig43783
#define x1 x12345
#define y1 y12345

using namespace std;

template<typename T>
T gcd(T x, T y) {
    while (y > 0) {
        x %= y;
        swap(x, y);
    }
    return x;
}

template<class _T>
inline _T sqr(const _T &x) {
    return x * x;
}

template<class _T>
inline string tostr(const _T &a) {
    ostringstream os("");
    os << a;
    return os.str();
}

typedef long double ld;
typedef long long ll;
typedef unsigned long long ull;
typedef pair<int, int> PII;
const long double PI = 3.1415926535897932384626433832795L;

template<typename T>
inline void input(T &a) {
    static int ed;
    a = 0;
    while (!isdigit(ed = getchar()) && ed != '-') { }
    char neg = 0;
    if (ed == '-') {
        neg = 1;
        ed = getchar();
    }
    while (isdigit(ed)) {
        a = 10 * a + ed - '0';
        ed = getchar();
    }
    if (neg) a = -a;
}

template<typename T = int>
inline T nxt() {
    T res;
    input(res);
    return res;
}

mt19937 generator;

bool check(int v) {
    for (int i = 2; i * i <= v; ++i) {
        if (v % i == 0) {
            return false;
        }
    }
    return true;
}

long long pw(long long a, long long n, long long m) {
    ll res = 1;
    while (n) {
        if (n & 1ll) {
            res = res * a % m;
        }
        a = a * a % m;
        n >>= 1;
    }
    return res;
}

const int N = 20000000 + 1;
int lp[N];
int mu[N];


struct st {
    vector <int> keys;
    vector <int> values;

    st() {}

    void add(int key) {
        keys.push_back(key);
    }

    void init() {
        sort(all(keys));
        keys.erase(unique(all(keys)), keys.end());
        values.resize(keys.size());
    }

    int get(int r) {
        r = upper_bound(all(keys), r) - keys.begin() - 1;
        int res = 0;
        for (; r >= 0; r &= r + 1, --r) {
            res += values[r];
        }
        return res;
    }

    void add(int pos, int val) {
        pos = lower_bound(all(keys), pos) - keys.begin();

        for (; pos < keys.size(); pos |= pos + 1) {
            values[pos] += val;
        }
    }
};

int main() {
    //#define int long
#ifdef LOCAL
    freopen("input.txt", "r", stdin);
    //freopen("output.txt", "w", stdout);
#else
#define fname "parts"
    //freopen(fname".in", "r", stdin);
    //freopen(fname".out", "w", stdout);
#endif
    mu[1] = 1;
    lp[1] = 1;
    for (int i = 2; i < N; ++i) {
        if (!lp[i]) {
            for (int j = i; j < N; j += i) {
                lp[j] = i;
            }
        }
        if (lp[i] == lp[i / lp[i]]) {
            mu[i] = 0;
        } else {
            mu[i] = -1 * mu[i / lp[i]];
        }
    }

    vector <PII> a;

    a.emplace_back(0, 0);

    int x = 0, y = 0;

    vector <int> ux;
    vector <int> uy;

    ux.push_back(0);
    uy.push_back(0);

    for (int i = 1; i < N; ++i) {
        x += mu[i] == 1;
        y += mu[i] == -1;
        a.emplace_back(100 * x - 99 * y, 100 * y - 99 * x);
        ux.emplace_back(100 * x - 99 * y);
        uy.emplace_back(100 * y - 99 * x);
    }

    sort(all(ux));
    sort(all(uy));

    ux.erase(unique(all(ux)), ux.end());
    uy.erase(unique(all(uy)), uy.end());

    for (auto & p : a) {
        p.x = lower_bound(all(ux), p.x) - ux.begin();
        p.y = lower_bound(all(uy), p.y) - uy.begin();
    }

    vector <st> f(ux.size());

    int it = 0;


    for (const auto & p : a) {
        if (it++ % 100000 == 0) cerr << it << "\n";
        for (int pos = p.x; pos < f.size(); pos |= pos + 1) {
            f[pos].add(p.y);
        }
    }

    for (st & s : f) {
        s.init();
    }

    long long ans = 0;

    for (const auto & p : a) {
        if (it++ % 100000 == 0) cerr << it << "\n";
        for (int pos = p.x; pos >= 0; pos &= pos + 1, --pos) {
            ans += f[pos].get(p.y);
        }
        for (int pos = p.x; pos < f.size(); pos |= pos + 1) {
            f[pos].add(p.y, 1);
        }
    }

    cout << ans << "\n";





#ifdef LOCAL
    cerr << "Time elapsed: " << 1.0 * clock() / CLOCKS_PER_SEC * 1000 << " ms." << endl;
#endif
    return 0;
}
