#include <bits/stdc++.h>

#define clr(x) memset((x), 0, sizeof(x))
#define all(x) (x).begin(), (x).end()
#define pb push_back
#define mp make_pair
#define in(x) int (x); input((x));
#define x first
#define y second
typedef int itn;

#define next next12345
#define prev prev12345
#define left lefdsf232
#define right rig43783
#define x1 x12345
#define y1 y12345

using namespace std;

template<typename T>
T gcd(T x, T y) {
    while (y > 0) {
        x %= y;
        swap(x, y);
    }
    return x;
}

template<class _T>
inline _T sqr(const _T &x) {
    return x * x;
}

template<class _T>
inline string tostr(const _T &a) {
    ostringstream os("");
    os << a;
    return os.str();
}

typedef long double ld;
typedef long long ll;
typedef unsigned long long ull;
typedef pair<int, int> PII;
const long double PI = 3.1415926535897932384626433832795L;

template<typename T>
inline void input(T &a) {
    static int ed;
    a = 0;
    while (!isdigit(ed = getchar()) && ed != '-') { }
    char neg = 0;
    if (ed == '-') {
        neg = 1;
        ed = getchar();
    }
    while (isdigit(ed)) {
        a = 10 * a + ed - '0';
        ed = getchar();
    }
    if (neg) a = -a;
}

template<typename T = int>
inline T nxt() {
    T res;
    input(res);
    return res;
}

mt19937 generator;

bool check(int v) {
    for (int i = 2; i * i <= v; ++i) {
        if (v % i == 0) {
            return false;
        }
    }
    return true;
}

long long pw(long long a, long long n, long long m) {
    ll res = 1;
    while (n) {
        if (n & 1ll) {
            res = res * a % m;
        }
        a = a * a % m;
        n >>= 1;
    }
    return res;
}


const int N = 1 << 25;

long long mul[N];
long long sum[N];

long long mod = 1000000993;

void upd(int v, int tl, int tr, int l, int r, long long val) {
    if (l >= r) return;
    if (tl == l && tr == r) {
        mul[v] *= val;
        mul[v] %= mod;
        return;
    }
    int tm = (tl + tr) >> 1;

    upd(v + v, tl, tm, l, min(tm, r), val);
    upd(v + v + 1, tm, tr, max(tm, l), r, val);

    sum[v] = (mul[v + v] * sum[v + v] + mul[v + v + 1] * sum[v + v + 1]) % mod;
}

void build(int v, int tl, int tr) {
    sum[v] = tr - tl;
    mul[v] = 1;
    if (tr - tl == 1) {
        return;
    }
    int tm = (tl + tr) >> 1;
    build(v + v, tl, tm);
    build(v + v + 1, tm, tr);
}

int main() {
    //#define int long
#ifdef LOCAL
    freopen("input.txt", "r", stdin);
    //freopen("output.txt", "w", stdout);
#else
#define fname "parts"
    //freopen(fname".in", "r", stdin);
    //freopen(fname".out", "w", stdout);
#endif
    int n = 11111111;

    build(1, 0, n + 1);

    long long ans = n + 1;

    for (int i = 2; i <= n; ++i) {
        cerr << i << endl;
        if (check(i)) {
            int p = i;

            int d = 0;
            int k = n;
            while (k /= p) {
                d += k;
            }

            upd(1, 0, n + 1, 0, n + 1, pw(p, d, mod));

            for (int z = 0; z * p <= n; ++z) {
                int deg = 0;
                int zz = z;
                while (zz) {
                    deg += zz;
                    zz /= p;
                }
                int l = z * p, r = min(n + 1, l + p);
                long long m = pw(p, mod - 1 - deg, mod);
                upd(1, 0, n + 1, l, r, m);
                upd(1, 0, n + 1, n + 1 - r, n - l + 1, m);
            }
        }
        ans += sum[1] * mul[1];
        ans %= mod;
    }
    cout << ans << "\n";

#ifdef LOCAL
    cerr << "Time elapsed: " << 1.0 * clock() / CLOCKS_PER_SEC * 1000 << " ms." << endl;
#endif
    return 0;
}
