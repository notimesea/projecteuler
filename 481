#include <bits/stdc++.h>

#define clr(x) memset((x), 0, sizeof(x))
#define all(x) (x).begin(), (x).end()
#define pb push_back
#define mp make_pair
#define in(x) int (x); input((x));
#define x first
#define y second
typedef int itn;

#define next next12345
#define prev prev12345
#define left lefdsf232
#define right rig43783
#define x1 x12345
#define y1 y12345

using namespace std;

template<typename T>
T gcd(T x, T y) {
    while (y > 0) {
        x %= y;
        swap(x, y);
    }
    return x;
}

template<class _T>
inline _T sqr(const _T &x) {
    return x * x;
}

template<class _T>
inline string tostr(const _T &a) {
    ostringstream os("");
    os << a;
    return os.str();
}

typedef long double ld;
typedef long long ll;
typedef unsigned long long ull;
typedef pair<int, int> PII;
const long double PI = 3.1415926535897932384626433832795L;

template<typename T>
inline void input(T &a) {
    static int ed;
    a = 0;
    while (!isdigit(ed = getchar()) && ed != '-') { }
    char neg = 0;
    if (ed == '-') {
        neg = 1;
        ed = getchar();
    }
    while (isdigit(ed)) {
        a = 10 * a + ed - '0';
        ed = getchar();
    }
    if (neg) a = -a;
}

template<typename T = int>
inline T nxt() {
    T res;
    input(res);
    return res;
}

mt19937 generator;

bool check(int v) {
    for (int i = 2; i * i <= v; ++i) {
        if (v % i == 0) {
            return false;
        }
    }
    return true;
}

long long pw(long long a, long long n, long long m) {
    ll res = 1;
    while (n) {
        if (n & 1ll) {
            res = res * a % m;
        }
        a = a * a % m;
        n >>= 1;
    }
    return res;
}

long long lcm(long long a, long long b) {
    return a / gcd(a, b) * b;
}


int n;

struct state {
    int mask;
    int pos;

    state clear(int to) {
        assert(mask & (1 << to));
        state res;
        res.mask = mask ^ (1 << to);
        for (int i = pos + 1; i < n + pos; ++i) {
            if (res.mask & (1 << (i % n))) {
                res.pos = i % n;
                return res;
            }
        }
        res.pos = pos;
        return res;
    }
    state next() {
        assert(__builtin_popcount(mask) > 1);
        state res;
        res.mask = mask;
        for (int i = pos + 1; i < n + pos; ++i) {
            if (res.mask & (1 << (i % n))) {
                res.pos = i % n;
                return res;
            }
        }
        cerr << mask << endl;
        assert(false);
    }
};

double pr[14];


const double EPS = 1e-10;

int gauss (vector < vector<double> > a, vector<double> & ans) {
    int n = (int) a.size();
    int m = (int) a[0].size() - 1;

    vector<int> where (m, -1);
    for (int col=0, row=0; col<m && row<n; ++col) {
        int sel = row;
        for (int i=row; i<n; ++i)
            if (abs (a[i][col]) > abs (a[sel][col]))
                sel = i;
        if (abs (a[sel][col]) < EPS)
            continue;
        for (int i=col; i<=m; ++i)
            swap (a[sel][i], a[row][i]);
        where[col] = row;

        for (int i=0; i<n; ++i)
            if (i != row) {
                double c = a[i][col] / a[row][col];
                for (int j=col; j<=m; ++j)
                    a[i][j] -= a[row][j] * c;
            }
        ++row;
    }

    ans.assign (m, 0);
    for (int i=0; i<m; ++i)
        if (where[i] != -1)
            ans[i] = a[where[i]][m] / a[where[i]][i];
    for (int i=0; i<n; ++i) {
        double sum = 0;
        for (int j=0; j<m; ++j)
            sum += ans[j] * a[i][j];
        if (abs (sum - a[i][m]) > EPS)
            return 0;
    }
    return 1;
}

int main() {
    //#define int long
#ifdef LOCAL
    freopen("input.txt", "r", stdin);
    //freopen("output.txt", "w", stdout);
#else
#define fname "parts"
    //freopen(fname".in", "r", stdin);
    //freopen(fname".out", "w", stdout);
#endif

    n = 14;

    double fib[n + 1];
    fib[0] = 1, fib[1] = 1;
    for (int i = 2; i <= n; ++i) {
        fib[i] = fib[i - 1] + fib[i - 2];
    }

    for (int i = 0; i < n; ++i) {
        pr[i] = fib[i] / fib[n];
        //cerr << i << " " << pr[i] << "\n";
    }


    vector <double> dp[1 << n][n];
    int move[1 << n][n];

    for (int i = 1; i < (1 << n); ++i) {
        cerr << i << endl;
        if (__builtin_popcount(i) == 1) {
            int j = 31 - __builtin_clz(i);
            dp[i][j] = vector <double>(n, 0);
            dp[i][j][j] = 1;
        } else {
            vector <vector <double> > a(n * n, vector <double>(n * n + 1));

            for (int j = 0; j < n; ++j) {
                if (i & (1 << j)) {
                    state s{i, j};
                    state next = s.next();
                    state bst;
                    double best = -1;
                    for (int t = j + 1; t < n + j; ++t) {
                        if (i & (1 << (t % n))) {
                            state mv = s.clear(t % n);
                            if (dp[mv.mask][mv.pos][j] > best + EPS) {
                                best = dp[mv.mask][mv.pos][j];
                                bst = mv;
                                move[i][j] = t % n;
                            }
                        }
                    }
                    for (int t = 0; t < n; ++t) {
                        a[j * n + t][j * n + t] = 1;
                        a[j * n + t][next.pos * n + t] = -(1 - pr[j]);
                        a[j * n + t][n * n] = pr[j] * dp[bst.mask][bst.pos][t];
                    }
                }
            }
//            for (auto p : a) {
//                for (auto q : p) {
//                    cout.width(3);
//                    cout << q << " ";
//                }
//                cout << "\n";
//            }
            vector <double> res;
            assert(gauss(a, res));
            for (int j = 0; j < n; ++j) {
                if (i & (1 << j)) {
                    dp[i][j].resize(n);
                    for (int t = 0; t < n; ++t) {
                        dp[i][j][t] = res[n * j + t];
                    }
                }
            }
        }
    }

    double ans[1 << n][n];
    clr(ans);

    for (int i = 1; i < (1 << n); ++i) {
//        cerr << i << endl;
        if (__builtin_popcount(i) == 1) {
            continue;
//            int j = 31 - __builtin_clz(i);
//            dp[i][j] = vector <double>(n, 0);
//            dp[i][j][j] = 1;
        } else {
            vector <vector <double> > a(n, vector <double>(n + 1));

            for (int j = 0; j < n; ++j) {
                if (i & (1 << j)) {
                    state s{i, j};
                    state next = s.next();
                    state bst = s.clear(move[i][j]);
                    a[j][j] = 1;
                    a[j][n] = pr[j] * ans[bst.mask][bst.pos] + 1;
                    a[j][next.pos] = -(1 - pr[j]);
//                    for (int t = 0; t < n; ++t) {
//                        a[j * n + t][j * n + t] = 1;
//                        a[j * n + t][next.pos * n + t] = -(1 - pr[j]);
//                        a[j * n + t][n * n] = pr[j] * dp[bst.mask][bst.pos][t];
//                    }
                }
            }
//            for (auto p : a) {
//                for (auto q : p) {
//                    cout.width(3);
//                    cout << q << " ";
//                }
//                cout << "\n";
//            }
            vector <double> res;
            assert(gauss(a, res));
            for (int j = 0; j < n; ++j) {
                if (i & (1 << j)) {
                    ans[i][j] = res[j];
                }
            }
        }
    }

    cout << setprecision(8) << fixed;
    cout << ans[(1 << n) - 1][0] << "\n";

//    for (int j = 0; j < 1; ++j) {
//        for (int i = 0; i < n; ++i) {
//            cout << dp[(1 << n) - 1][j][i] << " ";
//        }
//        cout << "\n";
//    }






#ifdef LOCAL
    cerr << "Time elapsed: " << 1.0 * clock() / CLOCKS_PER_SEC * 1000 << " ms." << endl;
#endif
    return 0;
}
