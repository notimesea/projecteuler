#include <bits/stdc++.h>

#define clr(x) memset((x), 0, sizeof(x))
#define all(x) (x).begin(), (x).end()
#define pb push_back
#define mp make_pair
#define in(x) int (x); input((x));
#define x first
#define y second
typedef int itn;

#define next next12345
#define prev prev12345
#define left lefdsf232
#define right rig43783
#define x1 x12345
#define y1 y12345

using namespace std;

template<typename T>
T gcd(T x, T y) {
    while (y > 0) {
        x %= y;
        swap(x, y);
    }
    return x;
}

template<class _T>
inline _T sqr(const _T &x) {
    return x * x;
}

template<class _T>
inline string tostr(const _T &a) {
    ostringstream os("");
    os << a;
    return os.str();
}

typedef long double ld;
typedef long long ll;
typedef unsigned long long ull;
typedef pair<int, int> PII;
const ld PI = 3.1415926535897932384626433832795L;

template<typename T>
inline void input(T &a) {
    static int ed;
    a = 0;
    while (!isdigit(ed = getchar()) && ed != '-') { }
    char neg = 0;
    if (ed == '-') {
        neg = 1;
        ed = getchar();
    }
    while (isdigit(ed)) {
        a = 10 * a + ed - '0';
        ed = getchar();
    }
    if (neg) a = -a;
}

template<typename T = int>
inline T nxt() {
    T res;
    input(res);
    return res;
}

mt19937 generator;

bool check(int v) {
    for (int i = 2; i * i <= v; ++i) {
        if (v % i == 0) {
            return false;
        }
    }
    return true;
}

long long pw(long long a, long long n, long long m) {
    ll res = 1;
    while (n) {
        if (n & 1ll) {
            res = res * a % m;
        }
        a = a * a % m;
        n >>= 1;
    }
    return res;
}

long long lcm(long long a, long long b) {
    return a / gcd(a, b) * b;
}

vector <int> primes;

long long res = 0;

vector <int> degrees;

#define ld __float128

ld f(ld i) {
    return i * i;
}

int n;

inline void gen_divisors(int pos, int cur, vector <int> &divisors, const vector <int> &dd) {
    while (pos < primes.size() && !dd[pos]) {
        ++pos;
    }
    if (pos == primes.size()) {
        divisors.push_back(cur);
        return;
    }
    for (int d = 0; d <= dd[pos] && cur <= n; ++d) {
        gen_divisors(pos + 1, cur, divisors, dd);
        cur *= primes[pos];
    }
}

ld solve(vector <int> degrees) {
    vector <int> divs;
    gen_divisors(0, 1, divs, degrees);
    sort(all(divs));

    vector <ld> p(n + 1);
    p[0] = 1;
    for (int i = 1; i <= n; ++i) {
        for (int x : divs) {
            if (x > i) break;
            p[i] += p[i - x];
        }
        p[i] /= i;
    }
    return p[n];
}

const int M = 100000007;//200000033;

__int128_t seed;

struct summ {
    ld ans = 0;
    vector <ld> nums;

    ld clear() {
        sort(all(nums), [](const ld &l, const ld &r) {
            return fabsl(l) < fabsl(r);
        });
        ld res = accumulate(all(nums), ld());
        nums.clear();
        return res;
    }

    void add(const ld &x) {
        nums.push_back(x);
    }

} ss;

struct myMap {
    __int128_t keys[M];
    ld values[M];
//    ld values2[M];

    myMap() {
        clr(keys);
        clr(values);
//        clr(values2);
    }

    ld get(__int128_t key) {
        key ^= seed;
        int pos = key % M;
        while (keys[pos] != key) {
            pos += 17;
            if (pos >= M) {
                pos -= M;
            }
        }
        return values[pos];
    }

//    ld get2(__int128_t key) {
//        key ^= seed;
//        int pos = key % M;
//        while (keys[pos] != key) {
//            pos += 17;
//            if (pos >= M) {
//                pos -= M;
//            }
//        }
//        return values2[pos];
//    }

    void put(__int128_t key, const ld &value) {
        key ^= seed;
        int pos = key % M;
        while (keys[pos] && keys[pos] != key) {
            pos += 17;
            if (pos >= M) {
                pos -= M;
            }
        }
        keys[pos] = key;
        values[pos] = value;
    }

//    void add(__int128_t key, const ld &value) {
//        key ^= seed;
//        int pos = key % M;
//        while (keys[pos] != key) {
//            pos += 17;
//            if (pos >= M) {
//                pos -= M;
//            }
//        }
//        values2[pos] += value;
//    }
};

myMap st;

void gen_divisors(int pos, __int128_t cur, int mul, vector <int> & degs, summ &z) {
    while (pos < primes.size() && !degs[pos]) {
        ++pos;
    }
    if (pos == primes.size()) {
        z.add(st.get(cur) * (mul ? -1 : 1));
        return;
    }
    gen_divisors(pos + 1, cur / primes[pos], mul ^ 1, degs, z);
    gen_divisors(pos + 1, cur, mul, degs, z);
}

ld ans = 0;

int cnt = 0;

struct pool {
    queue <pair <__int128_t, future<ld> > > t;

    void pop() {
        auto & v = t.front();
        v.y.wait();
        st.put(v.x, v.y.get());
        t.pop();
    }

    void clear() {
        while (!t.empty()) {
            pop();
        }
    }

    void add(__int128_t x, const vector <int> &degs) {
        if (t.size() == 16) {
            pop();
        }
        t.emplace(x, std::async(std::launch::async, solve, degs));
    }
} p;


ld solve2(__int128_t s, vector <int> degs) {
    summ z;
    gen_divisors(0, s, 0, degs, z);
    return z.clear();
}

const int T = 1000000;

summ glob;

struct pool2 {
    queue <pair <__int128_t, future<ld> > > t;

    void pop() {
        auto & v = t.front();
        v.y.wait();
        glob.add(f(v.x) * v.y.get());
//        st.add(v.x, v.y.get());
//        ss.add(f(v.x) * v.y.get());
//        ans += f(v.x) * v.y.get();
        t.pop();
    }

    void clear() {
        while (!t.empty()) {
            pop();
        }
    }

    void add(__int128_t x, const vector <int> &degs) {
        if (t.size() == 16) {
            pop();
        }
        t.emplace(x, std::async(std::launch::async, solve2, x, degs));
    }
} p2;


void rec(int pos, int s, __int128_t v, int ph) {
    if (pos == primes.size()) {

        if (ph == 0) {
            p.add(v, degrees);
        }
        if (ph == 1) {
            p2.add(v, degrees);
        }
//        if (ph == 2) {
//            ans += f(v) * st.get2(v);
//        }
        if (++cnt % 10000 == 0) {
            cout << cnt << "\n";
        }
        return;
    }
    degrees[pos] = 0;
    rec(pos + 1, s, v, ph);

    int cur = primes[pos];
    while (cur <= s) {
        degrees[pos]++;
        rec(pos + 1, s - cur, v * cur, ph);
        cur *= primes[pos];
    }
}

int main() {
    //#define int long
#ifdef LOCAL
    freopen("input.txt", "r", stdin);
    //freopen("output.txt", "w", stdout);
#else
    #define fname "parts"
    //freopen(fname".in", "r", stdin);
    //freopen(fname".out", "w", stdout);
#endif

    for (int i = 0; i < 100; ++i) {
        seed = seed * 2 + rand() % 2;
    }

    n = 350;
    int MAGIC = 500000;

    for (int i = 2; i <= n; ++i) {
        if (check(i)) {
            primes.push_back(i);
            degrees.push_back(0);
        }
    }

    rec(0, n, 1, 0);
    p.clear();
    cnt = 0;
    rec(0, n, 1, 1);
    p2.clear();
    ss.clear();

    ans = glob.clear();

    printf("%.9e", (double)ans);


#ifdef LOCAL
    cerr << "Time elapsed: " << 1.0 * clock() / CLOCKS_PER_SEC * 1000 << " ms." << endl;
#endif
    return 0;
}
