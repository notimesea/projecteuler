#include <bits/stdc++.h>

#define clr(x) memset((x), 0, sizeof(x))
#define all(x) (x).begin(), (x).end()
#define pb push_back
#define mp make_pair
#define in(x) int (x); input((x));
#define x first
#define y second
typedef int itn;

#define next next12345
#define prev prev12345
#define left lefdsf232
#define right rig43783
#define x1 x12345
#define y1 y12345

using namespace std;

template<typename T>
T gcd(T x, T y) {
    while (y > 0) {
        x %= y;
        swap(x, y);
    }
    return x;
}

template<class _T>
inline _T sqr(const _T &x) {
    return x * x;
}

template<class _T>
inline string tostr(const _T &a) {
    ostringstream os("");
    os << a;
    return os.str();
}

typedef long double ld;
typedef long long ll;
typedef unsigned long long ull;
typedef pair<int, int> PII;
const long double PI = 3.1415926535897932384626433832795L;

template<typename T>
inline void input(T &a) {
    static int ed;
    a = 0;
    while (!isdigit(ed = getchar()) && ed != '-') { }
    char neg = 0;
    if (ed == '-') {
        neg = 1;
        ed = getchar();
    }
    while (isdigit(ed)) {
        a = 10 * a + ed - '0';
        ed = getchar();
    }
    if (neg) a = -a;
}

template<typename T = int>
inline T nxt() {
    T res;
    input(res);
    return res;
}

mt19937 generator;

bool check(int v) {
    for (int i = 2; i * i <= v; ++i) {
        if (v % i == 0) {
            return false;
        }
    }
    return true;
}

long long pw(long long a, long long n, long long m) {
    ll res = 1;
    while (n) {
        if (n & 1ll) {
            res = res * a % m;
        }
        a = a * a % m;
        n >>= 1;
    }
    return res;
}

long long lcm(long long a, long long b) {
    return a / gcd(a, b) * b;
}

const int N = 300;

long long res = 0;

double ans = 0;

double fact[N + 1];

double lg[N + 1];

long long cnt = 0;

void rec(int r, int prev, long long l, double s, int k) {
//    if (r < N / 2 && k == 1) {
//        ++res;
//        return;
//    }
    //if (s < -30) return;
    if (cnt > 1e9) return;
    if (r == 0) {
        if (cnt % 1000000 == 0) {
            cerr << cnt << "\n";
        }
        ++cnt;
        ans += 1.0 * l * l * exp(s);
        return;
    }

    for (int i = prev + 1; i <= r; ++i) {
        rec(r - i, i, lcm(l, i), s - lg[i], 1);
    }

    if (prev <= r) {
        rec(r - prev, prev, lcm(l, prev), s - lg[prev] - lg[k + 1], k + 1);
    }
}

int main() {
    //#define int long
#ifdef LOCAL
    freopen("input.txt", "r", stdin);
    //freopen("output.txt", "w", stdout);
#else
#define fname "parts"
    //freopen(fname".in", "r", stdin);
    //freopen(fname".out", "w", stdout);
#endif

    //5933760.8233363666

    fact[0] = 0;

    for (int i = 1; i <= N; ++i) {
        fact[i] = fact[i - 1] + log(i);
        lg[i] = log(i);
    }

    rec(N, 1, 1, 0, 0);

    cout << setprecision(10) << fixed;

    cout << ans << "\n";

    exit(0);

//    cout << res << "\n";

//    return 0;

    unordered_map <long long, double> dp[N + 1];

    dp[0][1] = 1;

    //100000

//    cout << fact[N] << "\n";

    for (int i = 0; i < N; ++i) {
        cerr << i << "\n";
        long long mx = 0;
        for (int k = 1; k + i <= N; ++k) {
            double ways = exp(fact[N - i - 1] - fact[N - i - k] - fact[k + i] + fact[i]);
            for (const auto & x : dp[i]) {
                mx = max(mx, x.x);
                if (x.y < 1e-30) continue;
                dp[i + k][lcm(x.x, k)] += ways * x.y;
            }
        }
        cerr << dp[i].size() << " " << mx << "\n";
        dp[i].clear();
    }
    long double ans = 0;
    for (const auto & x : dp[N]) {
        ans += sqr(x.x) * x.y;
    }
//    ans /= fact[N];
    printf("%.9Le", ans);
//    cout << ans << "\n";

#ifdef LOCAL
    cerr << "Time elapsed: " << 1.0 * clock() / CLOCKS_PER_SEC * 1000 << " ms." << endl;
#endif
    return 0;
}
