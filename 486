#include <bits/stdc++.h>

#define clr(x) memset((x), 0, sizeof(x))
#define all(x) (x).begin(), (x).end()
#define pb push_back
#define mp make_pair
#define in(x) int (x); input((x));
#define x first
#define y second
typedef int itn;

#define next next12345
#define prev prev12345
#define left lefdsf232
#define right rig43783
#define x1 x12345
#define y1 y12345

using namespace std;

template<typename T>
T gcd(T x, T y) {
    while (y > 0) {
        x %= y;
        swap(x, y);
    }
    return x;
}

template<class _T>
inline _T sqr(const _T &x) {
    return x * x;
}

template<class _T>
inline string tostr(const _T &a) {
    ostringstream os("");
    os << a;
    return os.str();
}

typedef long double ld;
typedef long long ll;
typedef unsigned long long ull;
typedef pair<int, int> PII;
const long double PI = 3.1415926535897932384626433832795L;

template<typename T>
inline void input(T &a) {
    static int ed;
    a = 0;
    while (!isdigit(ed = getchar()) && ed != '-') { }
    char neg = 0;
    if (ed == '-') {
        neg = 1;
        ed = getchar();
    }
    while (isdigit(ed)) {
        a = 10 * a + ed - '0';
        ed = getchar();
    }
    if (neg) a = -a;
}

template<typename T = int>
inline T nxt() {
    T res;
    input(res);
    return res;
}

mt19937 generator;

bool check(int v) {
    for (int i = 2; i * i <= v; ++i) {
        if (v % i == 0) {
            return false;
        }
    }
    return true;
}

long long pw(long long a, long long n, long long m) {
    ll res = 1;
    while (n) {
        if (n & 1ll) {
            res = res * a % m;
        }
        a = a * a % m;
        n >>= 1;
    }
    return res;
}

const int K = 2;

struct vertex {
    int next[K];
    bool leaf;
    int p;
    int pch;
    int link;
    int go[K];
};

vertex t[1000];
int sz;

void init() {
    t[0].p = t[0].link = -1;
    memset (t[0].next, 255, sizeof t[0].next);
    memset (t[0].go, 255, sizeof t[0].go);
    sz = 1;
}

void add_string (const string & s) {
    int v = 0;
    for (size_t i=0; i<s.length(); ++i) {
        int c = s[i]-'0';
        if (t[v].next[c] == -1) {
            memset (t[sz].next, 255, sizeof t[sz].next);
            memset (t[sz].go, 255, sizeof t[sz].go);
            t[sz].link = -1;
            t[sz].p = v;
            t[sz].pch = c;
            t[v].next[c] = sz++;
        }
        v = t[v].next[c];
    }
    t[v].leaf = true;
}

int go (int v, int c);

int get_link (int v) {
    if (t[v].link == -1)
    if (v == 0 || t[v].p == 0)
        t[v].link = 0;
    else
        t[v].link = go (get_link (t[v].p), t[v].pch);
    return t[v].link;
}

int go (int v, int c) {
    if (t[v].go[c] == -1)
    if (t[v].next[c] != -1)
        t[v].go[c] = t[v].next[c];
    else
        t[v].go[c] = v==0 ? 0 : go (get_link (v), c);
    return t[v].go[c];
}

bool pal(const string &s) {
    return equal(s.begin(), s.end(), s.rbegin());
}

long long mod;


int main() {
    //#define int long
#ifdef LOCAL
    freopen("input.txt", "r", stdin);
    //freopen("output.txt", "w", stdout);
#else
#define fname "parts"
    //freopen(fname".in", "r", stdin);
    //freopen(fname".out", "w", stdout);
#endif

    int k = 5;

    init();

    for (int i = 0; i < (1 << k); ++i) {
        string bits;
        for (int j = 0; j < k; ++j) {
            if (i & (1 << j)) {
                bits += "1";
            } else {
                bits += "0";
            }
        }
        if (pal(bits)) {
            add_string(bits);
            //cout << bits << "\n";
        }
    }

    k += 1;

    for (int i = 0; i < (1 << k); ++i) {
        string bits;
        for (int j = 0; j < k; ++j) {
            if (i & (1 << j)) {
                bits += "1";
            } else {
                bits += "0";
            }
        }
        if (pal(bits)) {
            add_string(bits);
            //cout << bits << "\n";
        }
    }

    cout << sz << endl;

    for (int i = 0; i < sz; ++i) {
        int v = i;
        int ok = 0;
        while (v) {
            ok |= t[v].leaf;
            v = get_link(v);
        }
        t[i].leaf = ok;
    }



    int id[sz];

    int s = 0;

    for (int i = 0; i < sz; ++i) {
        if (!t[i].leaf) {
            id[i] = s++;
        }
    }
    int m[s + 1][s + 1];
    clr(m);

    for (int i = 0; i < sz; ++i) {
        if (t[i].leaf) continue;
        for (int j = 0; j < 2; ++j) {
            int to = go(i, j);
            if (t[to].leaf) continue;
            m[id[to]][id[i]] += 1;
        }
    }

    for (int i = 0; i <= s; ++i) {
        m[s][i] = 1;
    }

    s += 1;

//    cout << s << "\n";
//
//    cout << "{";
//    for (int i = 0; i < s; ++i) {
//        cout << "{";
//        for (int j = 0; j < s; ++j) {
//            cout << m[i][j];
//            if (j != s - 1) {
//                cout << ", ";
//            }
////            cout << m[i][j] << ", ";
//        }
//        cout << "}, ";
//        cout << "\n";
//    }
//    cout << "}";

    vector <int> mdivs = {9, 1997, 4877};
    vector <int> pdivs = {32, 3, 23, 53, 499};

    //ans for 12, 13, 14, ...
    vector <int> ans = {285, 317, 349, 381, 415, 451};

    vector <int> p = {171, 173, 175, 177, 176, 172};


    mod = 87654321;

//    for (int i = 12; i < 24; ++i) {
//        assert((100 * i - 2 * p[i % 6]) % 3 == 0);
//        cout << i << " ";
//        cout << pw(2, i + 1, 1e10) - (100 * i - 2 * p[i % 6]) / 3 << " ";
//        cout << pw(2, i + 1, 1e10) - 1 - (i - 12) / 6 * 200 - ans[i % 6] << "\n";
//    }
//
//    for (int a = 0; a < 6; ++a) {
//        for (int b = 0; b < 3; ++b) {
//            int i = 12 + 6 * b + a;
//
//            long long v1 = pw(2, i + 1, 1e10) - (100 * i - 2 * p[i % 6]) / 3;
//            long long v2 = pw(2, i + 1, 1e10) - 1 - 200 * b - ans[a];
//            cerr << v1 << " " << v2 << "\n";
//        }
//    }

    //ans[p] + 200 * k == 2^(12 + 6 * k + p + 1) - 1

    //cout << (pw(2, 95440424 + 1, mod) - 1 - (95440424 - 12) / 6 * 200ll - ans[95440424 % 6]) % mod << "\n";


    long long phi = accumulate(all(pdivs), 1ll, multiplies<long long>());

    long long inv200 = pw(200, phi - 1, mod);

    assert(inv200 * 200 % mod == 1);

    long long iuv = 3748593;
    long long ivu = 70773740;

    long long uv = phi * mod / 3;

    assert(mod * iuv % (phi / 3) == 1);
    assert(phi / 3 * ivu % mod == 1);

    long long N = 1000000000000000000ll;

    long long z = 0;

    int f = 0;

    for (int p = 0; p < 6; ++p) {
        long long mul = pw(2, 13 + p, mod);
        long long add = mod - 1 + mod - ans[p];
        //cerr << p << endl;
        for (int i = 0; i < phi; ++i) {
            //cerr << i << "\n";
            long long right = mul + add;
            mul *= 64;
            mul %= mod;
            right %= mod;
            long long x = right * inv200 % mod;
            if (x % 3 != i % 3) continue;

            long long u = mod;
            long long v = phi / 3;

            __int128_t a = x % u;
            __int128_t b = i % v;

            long long res = (a * v * ivu + b * u * iuv) % uv;

            res %= uv;

            if (12 + 6 * res + p > N) continue;

            long long q = 12 + 6 * res + p;
            z += 1 + (N - 12 - p - 6 * res) / (6 * uv);
        }
    }

    cout << z << "\n";





#ifdef LOCAL
    cerr << "Time elapsed: " << 1.0 * clock() / CLOCKS_PER_SEC * 1000 << " ms." << endl;
#endif
    return 0;
}
