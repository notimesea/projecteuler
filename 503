#include <bits/stdc++.h>

#define clr(x) memset((x), 0, sizeof(x))
#define all(x) (x).begin(), (x).end()
#define pb push_back
#define mp make_pair
#define in(x) int (x); input((x));
#define x first
#define y second
typedef int itn;

#define next next12345
#define prev prev12345
#define left lefdsf232
#define right rig43783
#define x1 x12345
#define y1 y12345

using namespace std;

template<typename T>
T gcd(T x, T y) {
    while (y > 0) {
        x %= y;
        swap(x, y);
    }
    return x;
}

template<class _T>
inline _T sqr(const _T &x) {
    return x * x;
}

template<class _T>
inline string tostr(const _T &a) {
    ostringstream os("");
    os << a;
    return os.str();
}

typedef long double ld;
typedef long long ll;
typedef unsigned long long ull;
typedef pair<int, int> PII;
const long double PI = 3.1415926535897932384626433832795L;

template<typename T>
inline void input(T &a) {
    static int ed;
    a = 0;
    while (!isdigit(ed = getchar()) && ed != '-') { }
    char neg = 0;
    if (ed == '-') {
        neg = 1;
        ed = getchar();
    }
    while (isdigit(ed)) {
        a = 10 * a + ed - '0';
        ed = getchar();
    }
    if (neg) a = -a;
}

template<typename T = int>
inline T nxt() {
    T res;
    input(res);
    return res;
}

mt19937 generator;


const int n = 1000000;

long double dp[n + 2];


int main() {
    //#define int long
#ifdef LOCAL
    freopen("input.txt", "r", stdin);
    //freopen("output.txt", "w", stdout);
#else
#define fname "race"
    //freopen(fname".in", "r", stdin);
    //freopen(fname".out", "w", stdout);
#endif

    auto start = std::chrono::high_resolution_clock::now();


    dp[n + 1] = 1e20;

    for (int j = n; j >= 1; --j) {
        int l = 0, r = j;
        while (r - l > 5) {
            int m1 = (2 * l + r) / 3;
            int m2 = (2 * r + l) / 3;

            long double f1 = dp[j + 1] * (j - m1) / j + (long double)(n + 1) / j / (j + 1) * m1 * (m1 + 1) / 2 - (long double)m1 / j;
            long double f2 = dp[j + 1] * (j - m2) / j + (long double)(n + 1) / j / (j + 1) * m2 * (m2 + 1) / 2 - (long double)m2 / j;

            if (f1 < f2) {
                r = m2;
            } else {
                l = m1;
            }
        }
        long double best = 1e20;
        for (int m = l; m <= r; ++m) {
            long double f1 = dp[j + 1] * (j - m) / j + (long double)(n + 1) / j / (j + 1) * m * (m + 1) / 2 - (long double)m / j;
            best = min(best, f1);
        }
        dp[j] = best;
    }
    cout << setprecision(10) << fixed;
    cout << dp[1] + 1 << "\n";


    auto finish = std::chrono::high_resolution_clock::now();

    std::cout << std::chrono::duration_cast<std::chrono::milliseconds>(finish-start).count() << "ms\n";


#ifdef LOCAL
    cerr << "Time elapsed: " << 1.0 * clock() / CLOCKS_PER_SEC * 1000 << " ms." << endl;
#endif
    return 0;
} 
