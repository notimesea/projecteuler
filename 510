#include "bits/stdc++.h"

#define clr(x) memset((x), 0, sizeof(x))
#define all(x) (x).begin(), (x).end()
#define pb push_back
#define mp make_pair
#define in(x) int (x); input((x));
#define x first
#define y second
typedef int itn;

#define next next12345
#define prev prev12345
#define left lefdsf232
#define right rig43783
#define x1 x12345
#define y1 y12345

using namespace std;

template<typename T>
T gcd(T x, T y) {
    while (y > 0) {
        x %= y;
        swap(x, y);
    }
    return x;
}

template<class _T>
inline _T sqr(const _T &x) {
    return x * x;
}

template<class _T>
inline string tostr(const _T &a) {
    ostringstream os("");
    os << a;
    return os.str();
}

typedef long double ld;
typedef long long ll;
typedef unsigned long long ull;
typedef pair<int, int> PII;
const long double PI = 3.1415926535897932384626433832795L;

template<typename T>
inline void input(T &a) {
    static int ed;
    a = 0;
    while (!isdigit(ed = getchar()) && ed != '-') {}
    char neg = 0;
    if (ed == '-') {
        neg = 1;
        ed = getchar();
    }
    while (isdigit(ed)) {
        a = 10 * a + ed - '0';
        ed = getchar();
    }
    if (neg) a = -a;
}

template<typename T = int>
inline T nxt() {
    T res;
    input(res);
    return res;
}

mt19937 generator;

int main() {
    //#define int long
#ifdef LOCAL
    freopen("input.txt", "r", stdin);
    //freopen("output.txt", "w", stdout);
#else
#define fname "race"
    //freopen(fname".in", "r", stdin);
    //freopen(fname".out", "w", stdout);
#endif
    //1 / sqrt(c) = 1 / sqrt(a) + 1 / sqrt(b)
    //a = u * u, b = v * v, c = w * w
    //uv * uv = (u + v) * w

    long long N = 1000000000;

    long long ans = 0;


    ans = 0;

    for (long long x = 1; x * x * x * x <= N; ++x) {
        for (long long y = 1; y <= x; ++y) {
            if (gcd(x, y) != 1) continue;
            long long l = x + y;
            assert(gcd(x, l) == 1 && gcd(y, l) == 1);
            long long u = x * l;
            if (u * u > N) break;
            long long v = y * l;
            long long w = x * y;
            //cout << u << " " << v << " " << w << "\n";
            u *= u, v *= v, w *= w;
            long long k = N / u;
            assert(gcd(u, gcd(v, w)) == 1);

            ans += k * (k + 1) / 2 * (u + v + w);
        }
    }

    cout << ans << "\n";

#ifdef LOCAL
    cerr << "Time elapsed: " << 1.0 * clock() / CLOCKS_PER_SEC * 1000 << " ms." << endl;
#endif
    return 0;
} 
