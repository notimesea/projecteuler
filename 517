#include "bits/stdc++.h"

#define clr(x) memset((x), 0, sizeof(x))
#define all(x) (x).begin(), (x).end()
#define pb push_back
#define mp make_pair
#define in(x) int (x); input((x));
#define x first
#define y second
typedef int itn;

#define next next12345
#define prev prev12345
#define left lefdsf232
#define right rig43783
#define x1 x12345
#define y1 y12345

using namespace std;

template<typename T>
T gcd(T x, T y) {
    while (y > 0) {
        x %= y;
        swap(x, y);
    }
    return x;
}

template<class _T>
inline _T sqr(const _T &x) {
    return x * x;
}

template<class _T>
inline string tostr(const _T &a) {
    ostringstream os("");
    os << a;
    return os.str();
}

typedef long double ld;
typedef long long ll;
typedef unsigned long long ull;
typedef pair<int, int> PII;
const long double PI = 3.1415926535897932384626433832795L;

template<typename T>
inline void input(T &a) {
    static int ed;
    a = 0;
    while (!isdigit(ed = getchar()) && ed != '-') {}
    char neg = 0;
    if (ed == '-') {
        neg = 1;
        ed = getchar();
    }
    while (isdigit(ed)) {
        a = 10 * a + ed - '0';
        ed = getchar();
    }
    if (neg) a = -a;
}

template<typename T = int>
inline T nxt() {
    T res;
    input(res);
    return res;
}

mt19937 generator;

const int N = 11000000;
const int S = sqrt(N) + 1;


long long x;

//int dp[S + 1][N + 1];
//
//
//
//int get(int n, int k) {
//    if ((x - k) * (x - k) < x * (n + 1) * (n + 1)) {
//        return 1;
//    }
//    int & res = dp[n][k];
//
//    if (res != -1) {
//        return res;
//    }
//    res = get(n + 1, k) + get(n, k + 1);
//
//    if (res >= mod) {
//        res -= mod;
//    }
//    return res;
//}

int mod = 1000000007;

long long f[N], fi[N], r[N];

int bin(int x, int y) {
    if (x < 0 || y < 0) {
        return 0;
    }
    return f[x + y] * fi[x] % mod * fi[y] % mod;
}

long long solve() {
    int prev = x;
    long long res = 0;
    for (int n = 0; n * n <= x; ++n) {
        int k = prev;
        while (k >= 0 && (x - k) * (x - k) < x * (n + 1) * (n + 1)) {
            --k;
        }
        ++k;
        for (int i = k; i < prev; ++i) {
            res += bin(n - 1, i);
        }
        res += bin(n, k - 1);
        prev = k;
    }
    return res;
}

bool isPrime(int x) {
    for (int i = 2; i * i <= x; ++i) {
        if (x % i == 0) {
            return false;
        }
    }
    return true;
}

int main() {
    //#define int long
#ifdef LOCAL
    freopen("input.txt", "r", stdin);
    //freopen("output.txt", "w", stdout);
#else
#define fname "race"
    //freopen(fname".in", "r", stdin);
    //freopen(fname".out", "w", stdout);
#endif

    r[1] = 1;
    for (int i = 2; i < N; ++i) {
        r[i] = (mod - (mod / i) * r[mod % i] % mod) % mod;
    }

    f[0] = fi[0] = 1;
    for (int i = 1; i < N; ++i) {
        f[i] = f[i - 1] * i % mod;
        fi[i] = fi[i - 1] * r[i] % mod;
    }

    int l = 10000000, r = 10010000;

    long long ans = 0;

    for (x = l; x <= r; ++x) {
        if (isPrime(x)) {
            cerr << x << "\n";
            ans += solve();
        }
    }

    cout << ans % mod << "\n";

#ifdef LOCAL
    cerr << "Time elapsed: " << 1.0 * clock() / CLOCKS_PER_SEC * 1000 << " ms." << endl;
#endif
    return 0;
} 
