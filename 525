import math
from matplotlib import pyplot as plp

import scipy.integrate as integ

def dx(t, a, b):
    c = math.sqrt(a**2 - b**2)
    e = c / a
    return a * (1 - e**2) / math.pow((1 - ((e * math.sin(t))**2)), 1.5)

def dy(t, a, b):
    c = math.sqrt(a**2 - b**2)
    e = c / a
    return -a * e * e * math.sin(t) * math.cos(t) * math.pow((1 - e * e) / (1 - (e * math.sin(t))**2), 1.5) / (e * e - 1)
    #return -a / math.sqrt(1 - e * e) * e * e * math.cos(t) * math.sin(t) / math.pow(1 - ((e * math.sin(t))**2), 1.5)

def dr(t, a, b):
    return math.sqrt(dx(t, a, b)**2 + dy(t, a, b)**2)


a = 4.0
b = 2.0


# N = 1000
#
# x = [integ.quad(dx, 0, 4*math.pi / N * i, args=(a, b))[0] for i in xrange(N)]
# y = [integ.quad(dy, 0, 4*math.pi / N * i, args=(a, b))[0] for i in xrange(N)]
#
# plp.plot(x, y)
# plp.show()

print "%.8f" % (integ.quad(dr, 0, 2*math.pi, args=(4, 1))[0] + integ.quad(dr, 0, 2*math.pi, args=(4, 3))[0])

