#include <bits/stdc++.h>


#define clr(x) memset((x), 0, sizeof(x))
#define all(x) (x).begin(), (x).end()
#define pb push_back
#define mp make_pair
#define in(x) int (x); input((x));
#define x first
#define y second
typedef int itn;

#define next next12345
#define prev prev12345
#define left lefdsf232
#define right rig43783
#define x1 x12345
#define y1 y12345

using namespace std;

template<typename T>
T gcd(T x, T y) {
    while (y > 0) {
        x %= y;
        swap(x, y);
    }
    return x;
}

template<class _T>
inline _T sqr(const _T &x) {
    return x * x;
}

template<class _T>
inline string tostr(const _T &a) {
    ostringstream os("");
    os << a;
    return os.str();
}

typedef long double ld;
typedef long long ll;
typedef unsigned long long ull;
typedef pair<int, int> PII;
const long double PI = 3.1415926535897932384626433832795L;

template<typename T>
inline void input(T &a) {
    static int ed;
    a = 0;
    while (!isdigit(ed = getchar()) && ed != '-') { }
    char neg = 0;
    if (ed == '-') {
        neg = 1;
        ed = getchar();
    }
    while (isdigit(ed)) {
        a = 10 * a + ed - '0';
        ed = getchar();
    }
    if (neg) a = -a;
}

template<typename T = int>
inline T nxt() {
    T res;
    input(res);
    return res;
}

mt19937 generator;


long long mod = 1000000007;

long long pw(long long a, long long n) {
    long long res = 1;
    while (n) {
        if (n & 1ll) {
            res = res * a % mod;
        }
        a = a * a % mod;
        n >>= 1;
    }
    return res;
}

long long inv(long long a) {
    return pw(a, mod - 2);
}

int primes[6000000];

int sz;

const int N = 1000000000;

char p[N];

void genPrimes(int upTo) {
    sz = 0;
    for (int i = 2; i < upTo; ++i) {
        if (!p[i]) {
            primes[sz++] = i;
            for (int j = i + i; j < upTo; j += i) {
                p[j] = 1;
            }
        }
    }
}

long long M = 10000000000000000ll;


int main() {
    //#define int long
#ifdef LOCAL
    freopen("input.txt", "r", stdin);
    //freopen("output.txt", "w", stdout);
#else
    #define fname "race"
    //freopen(fname".in", "r", stdin);
    //freopen(fname".out", "w", stdout);
#endif

    cout << log10(M) << endl;

    genPrimes(100000000);

    int v = (8 * 9 * 5 * 7) * (2 * 3 * 5 * 7);

    cout << v << endl;

    vector <pair <int, double> > q;

    int pr[v + 10];

    clr(pr);

    for (int i = 2; i < v + 10; ++i) if (!pr[i]) for (int j = i; j < v + 10; j += i) pr[j] = i;

#define check(x) (((x) % 2 != 0) && ((x) % 3 != 0) && ((x) % 5 != 0) && ((x) % 7 != 0))


    for (int i = 1; i < v; ++i) {
        double s = 0;
        for (int j = 0; j < 9; ++j) {
            double delta = 1;
            int x = i + j;
            for (int p = 2; p <= 9; ++p) {
                while (x % p == 0) {
                    delta /= p;
                    x /= p;
                }
            }
            s += delta;
        }
        q.push_back(mp(i, s));
        l1:;
    }

    sort(all(q), [&](const pair <int, double> &l, const pair <int, double> &r) {
        return l.y > r.y;
    });

    q.resize(96);

    int div[q.size()][9];

    for (int i = 0; i < q.size(); ++i) {
        //cout << q[i].x << "\n";
        for (int j = 0; j < 9; ++j) {
            int d = 1;
            int x = q[i].x + j;
            for (int p = 2; p <= 9; ++p) {
                while (x % p == 0) {
                    x /= p;
                    d *= p;
                }
            }
            div[i][j] = d;
            //cout << div[i][j] << " ";
        }
        //cout << "\n";
    }

//    exit(0);

//    for (auto V : q) {
//        cout << V.x << " " << V.y << "\n";
//        for (int j = 0; j < 9; ++j) {
//            double delta = 1;
//            int x = V.x + j;
//            cout << "1";
//            for (int p = 2; p <= 9; ++p) {
//                while (x % p == 0) {
//                    delta /= p;
//                    x /= p;
//                    cout << "*" << p;
//                }
//            }
//            cout << " ";
////            s += delta;
//        }
//        cout << "\n";
//    }

//    exit(0);

    long long ans = 0;


    int ph = 0;

    //M = 9994027501649831ll;

    for (long long x = M - M % v; x >= 0; x -= v) {
        if (++ph % 10000 == 0)
            cerr << x << "\n";
        for (int j = 0; j < (int)q.size(); ++j) {
            if (x + q[j].x > M) continue;
//            if (x + q[j].x == 9994027501649831ll) {
//                cout << "OK\n";
//                exit(0);
//            }
            long long t[9];
            for (int k = 0; k < 9; ++k) {
                t[k] = (x + q[j].x + k) / div[j][k];
            }
            int ok = 1;
            for (int r = 0; ok && r < sz; ++r) {
                for (int k = 0; k < 9; ++k) {
                    ok &= t[k] % primes[r] != 0;
                }
            }
            if (ok) {
                ans = max(ans, accumulate(t, t + 9, 0ll));
                cout << ans << "\n";
            }
        }
    }





#ifdef LOCAL
    cerr << "Time elapsed: " << 1.0 * clock() / CLOCKS_PER_SEC * 1000 << " ms." << endl;
#endif
    return 0;
}
