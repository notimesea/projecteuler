#include <bits/stdc++.h>
#include <x86intrin.h>

#define clr(x) memset((x), 0, sizeof(x))
#define all(x) (x).begin(), (x).end()
#define pb push_back
#define mp make_pair
#define forn(i, n) for (int i = 0; i < (n); ++i)
#define ford(i, n) for (int i = (n) - 1; i >= 0; --i)
#define in(x) int (x); input((x));
#define x first
#define fi first
#define y second
#define se second
typedef int itn;

#define next next12345
#define prev prev12345
#define left lefdsf232
#define right rig43783
#define x1 x12345
#define y1 y12345

using namespace std;

template<typename T>
T gcd(T x, T y) {
    while (y > 0) {
        x %= y;
        swap(x, y);
    }
    return x;
}

template<class _T>
inline _T sqr(const _T &x) {
    return x * x;
}

template<class _T>
inline string tostr(const _T &a) {
    ostringstream os("");
    os << a;
    return os.str();
}

typedef long double ld;
typedef long long ll;
typedef unsigned long long ull;
typedef pair<int, int> PII;
typedef pair<int, int> pii;
typedef vector <int> vi;
const long double PI = 3.1415926535897932384626433832795L;

template<typename T>
inline void input(T &a) {
    static int ed;
    a = 0;
    while (!isdigit(ed = getchar()) && ed != '-') { }
    char neg = 0;
    if (ed == '-') {
        neg = 1;
        ed = getchar();
    }
    while (isdigit(ed)) {
        a = 10 * a + ed - '0';
        ed = getchar();
    }
    if (neg) a = -a;
}

template<typename T = int>
inline T nxt() {
    T res;
    input(res);
    return res;
}

mt19937 generator;

bool check(int v) {
    if (v == 1) return false;
    for (int i = 2; i * i <= v; ++i) {
        if (v % i == 0) {
            return false;
        }
    }
    return true;
}

long long pw(long long a, long long n, long long m) {
    ll res = 1;
    while (n) {
        if (n & 1ll) {
            res = res * a % m;
        }
        a = a * a % m;
        n >>= 1;
    }
    return res;
}

long long lcm(long long a, long long b) {
    return a / gcd(a, b) * b;
}

const int N = 20 * 1000 * 1000 + 1;

vector <int> pDivs[N];
vector <int> p1Divs[N];

int id[N + 1];
int deg[N + 1];
int ok[N + 1];

int getDegree(int n, int p) {
    int res = 0;
    while (n % p == 0) {
        res += 1;
        n /= p;
    }
    return res;
}

long long mod = 1000000000;

int main() {
    //#define int long
#ifdef LOCAL
    freopen("input.txt", "r", stdin);
    //freopen("output.txt", "w", stdout);
#else
    #define fname "text"
    //freopen(fname".in", "r", stdin);
    //freopen(fname".out", "w", stdout);
#endif

    for (int i = 2; i < N; ++i) {
        if (pDivs[i].empty()) {
            for (int j = i; j < N; j += i) {
                pDivs[j].push_back(i);
            }
            for (int j = i - 1; j < N; j += i - 1) {
                p1Divs[j].push_back(i);
            }
        }
    }

    pair <long double, long long> ans = mp(0, 0);

    for (int i = 2; i < N; ++i) {
        if (i % 10000 == 0) cerr << i << "\n";
        int x = i;
        for (int j = 0; j < (int)pDivs[i].size(); ++j) {
            int p = pDivs[i][j];
            id[p] = i;
            deg[p] = 0;
            ok[p] = 0;
            while (x % p == 0) {
                x /= p;
                deg[p]++;
            }
        }
        assert(x == 1);
        long long res = 1;
        long double z = 1;
        for (int j = 0; j < (int)p1Divs[i].size(); ++j) {
            int p = p1Divs[i][j];
            if (p == 2) {
                if (id[p] == i) {
                    int d = deg[p] + 2;
                    while (d--) {
                        res = res * 2 % mod;
                        z = z * 2;
                    }
                    ok[p] = 1;
                } else {
                    res = res * 2 % mod;
                    z = z * 2;
                }
                continue;
            }
            int f = 1;
            for (int pr : pDivs[p - 1]) {
                if (getDegree(p - 1, pr) > deg[pr]) {
                    f = 0;
                    break;
                }
            }

            if (!f) continue;
            for (int pr : pDivs[p - 1]) {
                int d = getDegree(p - 1, pr);
                if (deg[pr] == d) {
                    ok[pr] = 1;
                }
            }
            long long cur = p;
            if (id[p] == i) {
                int d = deg[p];
                ok[p] = 1;
                while (d--) {
                    cur = cur * p % mod;
                }
            }
            res = res * cur % mod;
            z = z * cur;
        }
        int f = 1;
        for (int j = 0; j < (int)pDivs[i].size(); ++j) {
            int p = pDivs[i][j];
            f &= ok[p];
        }
        if (f) {
            ans = max(ans, mp(z, res));
        }
    }
    ans.x += 1;
    ans.y += 1;
    ans.y %= mod;
    cout << ans.x << " " << ans.y << "\n";
    

#ifdef LOCAL
    cerr << "Time elapsed: " << 1.0 * clock() / CLOCKS_PER_SEC * 1000 << " ms." << endl;
#endif
    return 0;
}
