#include <bits/stdc++.h>
#include <x86intrin.h>

#define clr(x) memset((x), 0, sizeof(x))
#define all(x) (x).begin(), (x).end()
#define pb push_back
#define mp make_pair
#define forn(i, n) for (int i = 0; i < (n); ++i)
#define ford(i, n) for (int i = (n) - 1; i >= 0; --i)
#define in(x) int (x); input((x));
#define x first
#define fi first
#define y second
#define se second
typedef int itn;

#define next next12345
#define prev prev12345
#define left lefdsf232
#define right rig43783
#define x1 x12345
#define y1 y12345

using namespace std;

template<typename T>
T gcd(T x, T y) {
    while (y > 0) {
        x %= y;
        swap(x, y);
    }
    return x;
}

template<class _T>
inline _T sqr(const _T &x) {
    return x * x;
}

template<class _T>
inline string tostr(const _T &a) {
    ostringstream os("");
    os << a;
    return os.str();
}

typedef long double ld;
typedef long long ll;
typedef unsigned long long ull;
typedef pair<int, int> PII;
typedef pair<int, int> pii;
typedef vector <int> vi;
const long double PI = 3.1415926535897932384626433832795L;

template<typename T>
inline void input(T &a) {
    static int ed;
    a = 0;
    while (!isdigit(ed = getchar()) && ed != '-') { }
    char neg = 0;
    if (ed == '-') {
        neg = 1;
        ed = getchar();
    }
    while (isdigit(ed)) {
        a = 10 * a + ed - '0';
        ed = getchar();
    }
    if (neg) a = -a;
}

template<typename T = int>
inline T nxt() {
    T res;
    input(res);
    return res;
}

mt19937 generator;

bool check(int v) {
    if (v == 1) return false;
    for (int i = 2; i * i <= v; ++i) {
        if (v % i == 0) {
            return false;
        }
    }
    return true;
}

long long pw(long long a, long long n, long long m) {
    ll res = 1;
    while (n) {
        if (n & 1ll) {
            res = res * a % m;
        }
        a = a * a % m;
        n >>= 1;
    }
    return res;
}

long long lcm(long long a, long long b) {
    return a / gcd(a, b) * b;
}

int y[20];

const int n = 14;
int w;

int ans;

int ban[20][20];

bool ch(int pos) {
    int ok[n];
    clr(ok);
    for (int i = pos; i < n; ++i) {
        for (int j = 0; j < n; ++j) {
            if (!ban[i][j]) ok[j] = 1;
        }
    }
    return accumulate(ok, ok + n, 0) >= n - pos;
}

int ans2;

void rec(int pos) {
    if (pos == n) {
        ++ans;
        return;
    }
    if (pos == 7) {
        ++ans2;
        return;
    }

    for (int i = 0; i < n; ++i) {
        if (!ban[pos][i]) {
            for (int j = 0; j < n - w && j + pos < n; ++j) {
                ban[pos + j][i]++;
                if (i - j >= 0) ban[pos + j][i - j]++;
                if (i + j < n) ban[pos + j][i + j]++;
            }
            rec(pos + 1);
            for (int j = 0; j < n - w && j + pos < n; ++j) {
                ban[pos + j][i]--;
                if (i - j >= 0) ban[pos + j][i - j]--;
                if (i + j < n) ban[pos + j][i + j]--;
            }
        }
    }
}

int main() {
    //#define int long
#ifdef LOCAL
    freopen("input.txt", "r", stdin);
    //freopen("output.txt", "w", stdout);
#else
    #define fname "seq"
    //freopen(fname".in", "r", stdin);
    //freopen(fname".out", "w", stdout);
#endif

    typedef bitset<n * n> bset;

    long long sum = 0;

    for (int w = 0; w < n; ++w) {
        unordered_map<bset, long long> d;
        d[bset()] = 1;

        for (int i = 0; i < n; ++i) {
            unordered_map<bset, long long> tmp;
            for (const auto & x : d) {
                for (int j = 0; j < n; ++j) {
                    if (x.x.test(j)) continue;
                    bset to = x.x;
                    for (int k = 0; k < n - w && k + i < n; ++k) {
                        to.set(n * k + j);
                        if (j - k >= 0) to.set(n * k + j - k);
                        if (j + k < n) to.set(n * k + j + k);
                    }
                    to >>= n;
                    tmp[to] += x.y;
                }
            }
            d.swap(tmp);
        }
        long long ans = 0;
        for (const auto & x : d) {
            ans += x.y;
        }
        cerr << ans << ", ";
        sum += ans;
    }
    cout << sum << endl;


#ifdef LOCAL
    cerr << "Time elapsed: " << 1.0 * clock() / CLOCKS_PER_SEC * 1000 << " ms." << endl;
#endif
    return 0;
}
