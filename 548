#include <bits/stdc++.h>

#define clr(x) memset((x), 0, sizeof(x))
#define all(x) (x).begin(), (x).end()
#define pb push_back
#define mp make_pair
#define in(x) int (x); input((x));
#define x first
#define y second
typedef int itn;

//#define next next12345
//#define prev prev12345
#define left lefdsf232
#define right rig43783
#define x1 x12345
#define y1 y12345

using namespace std;

template<typename T>
T gcd(T x, T y) {
    while (y > 0) {
        x %= y;
        swap(x, y);
    }
    return x;
}

template<class T>
T lcm(T a, T b) {
    return a / gcd(a, b) * b;
}


template<class _T>
inline _T sqr(const _T &x) {
    return x * x;
}

template<class _T>
inline string tostr(const _T &a) {
    ostringstream os("");
    os << a;
    return os.str();
}

typedef long double ld;
typedef long long ll;
typedef unsigned long long ull;
typedef pair<int, int> PII;
const ld PI = 3.1415926535897932384626433832795L;

template<typename T>
inline void input(T &a) {
    static int ed;
    a = 0;
    while (!isdigit(ed = getchar()) && ed != '-') { }
    char neg = 0;
    if (ed == '-') {
        neg = 1;
        ed = getchar();
    }
    while (isdigit(ed)) {
        a = 10 * a + ed - '0';
        ed = getchar();
    }
    if (neg) a = -a;
}

template<typename T = int>
inline T nxt() {
    T res;
    input(res);
    return res;
}

void myassert(bool v) {
    assert(v);
    //cout << "FAIL\n";
    //exit(0);
}

mt19937 generator;

bool check(int v) {
    if (v < 2) return false;
    for (int i = 2; i * i <= v; ++i) {
        if (v % i == 0) {
            return false;
        }
    }
    return true;
}

long long pw(long long a, long long n, long long m) {
    ll res = 1;
    while (n) {
        if (n & 1ll) {
            res = res * a % m;
        }
        a = a * a % m;
        n >>= 1;
    }
    return res;
}

long long inv(long long a, long long p) {
    long long res = 1;
    while (a > 1) {
        res = res * (p - p / a) % p;
        a = p % a;
    }
    return res;
}

const int N = 10000000 + 1;

map <vector <int>, long long> dp;

int used[N];

long long bound = 10000000000000000ll;

long long solve(vector <int> x);

void rec(int pos, vector <int> &x, vector <int> cur, long long &sum) {
    if (sum > bound) return;
    if (pos == x.size()) {
        if (cur != x)
            sum += solve(cur);
        return;
    }
    for (int d = 0; d <= x[pos]; ++d) {
        cur.pb(d);
        rec(pos + 1, x, cur, sum);
        cur.pop_back();
    }
}
int phase = 1;

long long solve(vector <int> x) {
    sort(all(x), greater <int>());
    while (!x.empty() && !x.back()) {
        x.pop_back();
    }
    if (x.empty()) {
        return 1;
    }
    if (dp.count(x)) {
        return dp[x];
    }
    long long sum = 0;
    rec(0, x, vector <int>(), sum);
    return dp[x] = sum;
}

long long mod = 987654321;


vector <int> d;

vector <int> primes;

long long ans = 0;

int it = 0;

void check() {
    cerr << it++ << endl;
    long long res = solve(d);
    if (d == vector <int>{4, 1}) {
        //assert(false);
        cerr << "RES " << res << endl;
        assert(res == 48);
    }
    if (res <= bound) {
        cerr << "R " << res << "\n";
        vector <int> dd;
        for (long long i = 2; i * i <= res; ++i) {
            if (res % i == 0) {
                dd.pb(0);
                while (res % i == 0) {
                    dd.back() += 1;
                    res /= i;
                }
            }
        }
        if (res > 1) {
            dd.pb(1);
        }
        sort(all(dd), greater<int>());
        if (dd == d) {
            ans += solve(d);
        }
    }
}

void rec(int pos, int last, long long x) {
    check();
    for (int de = 1; de <= last; ++de) {
        x *= primes[pos];
        if (x > bound) break;
        d.pb(de);
        rec(pos + 1, de, x);
        d.pop_back();
    }
}

void solve(int test) {
    long long pr = 1;
    for (int i = 2; ; ++i) {
        if (check(i)) {
            primes.pb(i);
            pr *= i;
            if (pr > bound) break;
        }
    }
    rec(0, 100, 1);
    cout << ans << "\n";
}



int main(int argc, char ** argv) {

#ifdef LOCAL
    freopen("input.txt", "r", stdin);
    //freopen("output.txt", "w", stdout);
#else
    #define fname "sequence"
    //freopen(fname".in", "r", stdin);
    //freopen(fname".out", "w", stdout);
#endif

#ifdef LOCAL

    int t = 1;
#else
    int t = 1;
#endif
    int c = 0;
    while (t--) {
        solve(++c);
    }

#ifdef LOCAL
    cerr << "Time elapsed: " << 1.0 * clock() / CLOCKS_PER_SEC * 1000 << " ms." << endl;
#endif
    return 0;
}
