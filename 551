#include <bits/stdc++.h>

#define clr(x) memset((x), 0, sizeof(x))
#define all(x) (x).begin(), (x).end()
#define pb push_back
#define mp make_pair
#define in(x) int (x); input((x));
#define x first
#define y second
typedef int itn;

//#define next next12345
//#define prev prev12345
#define left lefdsf232
#define right rig43783
#define x1 x12345
#define y1 y12345

using namespace std;

template<typename T>
T gcd(T x, T y) {
    while (y > 0) {
        x %= y;
        swap(x, y);
    }
    return x;
}

template<class T>
T lcm(T a, T b) {
    return a / gcd(a, b) * b;
}


template<class _T>
inline _T sqr(const _T &x) {
    return x * x;
}

template<class _T>
inline string tostr(const _T &a) {
    ostringstream os("");
    os << a;
    return os.str();
}

typedef long double ld;
typedef long long ll;
typedef unsigned long long ull;
typedef pair<int, int> PII;
const ld PI = 3.1415926535897932384626433832795L;

template<typename T>
inline void input(T &a) {
    static int ed;
    a = 0;
    while (!isdigit(ed = getchar()) && ed != '-') { }
    char neg = 0;
    if (ed == '-') {
        neg = 1;
        ed = getchar();
    }
    while (isdigit(ed)) {
        a = 10 * a + ed - '0';
        ed = getchar();
    }
    if (neg) a = -a;
}

template<typename T = int>
inline T nxt() {
    T res;
    input(res);
    return res;
}

void myassert(bool v) {
    assert(v);
    //cout << "FAIL\n";
    //exit(0);
}

mt19937 generator;

bool check(int v) {
    if (v < 2) return false;
    for (int i = 2; i * i <= v; ++i) {
        if (v % i == 0) {
            return false;
        }
    }
    return true;
}

long long pw(long long a, long long n, long long m) {
    ll res = 1;
    while (n) {
        if (n & 1ll) {
            res = res * a % m;
        }
        a = a * a % m;
        n >>= 1;
    }
    return res;
}

long long inv(long long a, long long p) {
    long long res = 1;
    while (a > 1) {
        res = res * (p - p / a) % p;
        a = p % a;
    }
    return res;
}

const int N = 10000000;

int s[N];

struct data {
    int cnt[N];
    int nx[N];
    data(int v) {
        for (int j = N - 1; j >= 0; --j) {
            if (j + s[j] + v < N) {
                cnt[j] = cnt[j + s[j] + v] + 1;
                nx[j] = nx[j + s[j] + v];
            } else {
                cnt[j] = 1;
                nx[j] = j + s[j] + v - N;
            }
        }
    }

};

data * q[1000];

void pre() {
    for (int i = 1; i < N; ++i) {
        s[i] = i % 10 + s[i / 10];
    }
}

int dsum(long long x) {
    int res = 0;
    while (x) {
        res += x % 10;
        x /= 10;
    }
    return res;
}

long long stupid(long long x, int k) {
    for (int i = 0; i < k; ++i) {
        x += dsum(x);
    }
    return x;
}

void solve(int test) {
    long long rem = 1000000000000000ll;
    --rem;
    int r = 1;
    long long t = 0;
    int s = 0;
    while (1) {
        if (!q[s]) q[s] = new data(s);
        int v = q[s]->cnt[r];
        if (v >= rem) {
            cout << stupid(t * N + r, rem) << "\n";
            return;
        }
        r = q[s]->nx[r];
        rem -= v;
        long long tt = t + 1;
        while (t % 10 == 9) {
            s -= 9;
            t /= 10;
        }
        s += 1;
        t = tt;
        if (t % 100000000 == 0) {
            cerr << t << " " << rem << "\n";
        }
    }
}



int main(int argc, char ** argv) {

#ifdef LOCAL
    freopen("input.txt", "r", stdin);
    //freopen("output.txt", "w", stdout);
#else
    #define fname "sequence"
    //freopen(fname".in", "r", stdin);
    //freopen(fname".out", "w", stdout);
#endif

    pre();

#ifdef LOCAL

    int t = 1;
#else
    int t = 1;
#endif
    int c = 0;
    while (t--) {
        solve(++c);
    }

#ifdef LOCAL
    cerr << "Time elapsed: " << 1.0 * clock() / CLOCKS_PER_SEC * 1000 << " ms." << endl;
#endif
    return 0;
}
