#pragma GCC optimize("Ofast", "unroll-loops", "omit-frame-pointer", "inline") //Optimization flags
#pragma GCC option("arch=native", "tune=native", "no-zero-upper") //Enable AVX
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,avx,avx2")  //Enable AVX

#ifdef LOCAL

#include <stdint.h>
#include <inttypes.h>
#include <sys/resource.h>

struct ___ {
    ___() {
        rlimit R{};
        getrlimit(RLIMIT_STACK, &R);
        R.rlim_cur = R.rlim_max;
        setrlimit(RLIMIT_STACK, &R);
    }
} ___;

#endif

#include <memory>
#include <bits/stdc++.h>


#define clr(x) memset((x), 0, sizeof(x))
#define all(x) (x).begin(), (x).end()
#define pb push_back
#define mp make_pair
#define x first
#define y second
#define forn(i, n) for(int i = 0; i < (int)(n); ++i)
#define ford(i, n) for(int i = (int)(n) - 1; i >= 0; --i)
#define for1(i, n) for(int i = 1; i <= (int)(n); ++i)

using namespace std;

#ifndef LOCAL
#define cerr while(0) cerr
#endif

#ifdef AUTO_MALLOC
namespace MALLOC {
    const size_t MAX_HEAP = 1024 * 1000 * 1000;
    char buf[MAX_HEAP];
    size_t ptr;
}

void *operator new(size_t size) {
    void *result = MALLOC::buf + MALLOC::ptr;
    MALLOC::ptr += size;
    return result;
}

void operator delete(void *ptr) noexcept { /* DO NOTHING */ }

#endif //AUTO_MALLOC

typedef vector<int> vi;
typedef vector<vi> vvi;
typedef pair<int, int> pii;
//typedef pair<long long, long long> pii;
typedef vector<long long> vll;
typedef long double ld;
typedef long long ll;
typedef unsigned long long ull;
typedef int itn;
typedef unsigned int uint;

const ld PI = 3.1415926535897932384626433832795L;

template<class T>
bool uin(T &, const T &);

template<class T>
bool uax(T &, const T &);

template<class T>
T gcd(T, T);

template<class T>
T lcm(T, T);

template<class _T>
inline string tostr(const _T &);

template<typename T>
void input(T &);

template<typename T = long long>
T nxt();

bool checkp(long long);

template<typename T, typename N>
T pw(T a, N n, T m);

template<typename T>
T inv(T a, T p);

template<class _T>
_T sqr(const _T &x);

template<class T, class... Args>
inline auto make_vec(size_t n, Args &&... args) {
    if constexpr(sizeof...(args) == 1)
        return vector<T>(n, T(args...));
    else
        return vector(n, make_vec<T>(args...));
}

template<class... Args>
inline auto make_vec(size_t n, Args &&... args) {
    if constexpr(sizeof...(args) == 1)
        return vector(n, args...);
    else
        return vector(n, make_vec(args...));
}

void pre() {

}

int TTT;

double sqrt2 = sqrtl(double(2));

const int N = 1001;

int pos[N][N];

struct Num {
    int x;
    int y;

    Num operator+(const Num &r) const {
        return Num{x + r.x, y + r.y};
    }

    bool operator<(const Num &r) const {
        return x + sqrt2 * y < r.x + sqrt2 * r.y;
    }

    bool operator==(const Num &r) const {
        return x == r.x && y == r.y;
    }

    double value() const {
        return x + sqrt2 * y;
    }

    int getPos() const {
        return pos[x][y];
    }
};

void solve(int _) {
    Num one = Num{1, 0};
    Num sq2 = Num{0, 1};

    vector <Num> states;
    states.push_back(Num{0, 0});

    vector <Num> al;
    for (int x = 0; x < N; ++x) {
        for (int y = 0; y < N; ++y) {
            auto n = Num{x, y};
            if (n < Num{501, 0}) {
                al.push_back(n);
            }
        }
    }

    for (int x = 0; x < N; ++x) {
        for (int y = 0; y < N; ++y) {
            pos[x][y] = al.size();
        }
    }

    sort(all(al));

    for (int i = 0; i < al.size(); ++i) {
        pos[al[i].x][al[i].y] = i;
    }



    double min_delta = 1e20;

    for (int i = 0; i + 1 < al.size(); ++i) {
        min_delta = min(min_delta, al[i + 1].value() - al[i].value());
    }

    cerr << "min_delta: " << min_delta << endl;

    vector <int> g(al.size(), -1);

    const int MAGIC = 256;

    vector <array<int, MAGIC> > cnt(al.size() + 1);
    vector <double> s1(al.size() + 1);
    vector <double> ss2(al.size() + 1);

    array<int, MAGIC> s{};

    double best = 0;
    double best_pos = 0;

    double MIN = 200 - 1e-14, MAX = 500 + 1e-14;

    cerr << "S: " << al.size() << endl;

    for (int i = 0; i + 1 < al.size(); ++i) {
        if (i % 1000 == 0) cerr << "i: " << i << endl;

        for (int t = 0; t < MAGIC; ++t) {
            s[t] += cnt[i][t];
        }

        for (int t = 0; t < MAGIC; ++t) {
            if (!s[t]) {
                g[i] = t;
                break;
            }
        }
        assert(g[i] != -1);

        for (int j = 0; j <= i; ++j) {
            {
                auto l = (al[i] + al[j] + one).getPos();
                auto r = (al[i + 1] + al[j + 1] + one).getPos();

                cnt[l][g[i] ^ g[j]]++;
                cnt[r][g[i] ^ g[j]]--;
            }
            {
                auto l = (al[i] + al[j] + sq2).getPos();
                auto r = (al[i + 1] + al[j + 1] + sq2).getPos();

                cnt[l][g[i] ^ g[j]]++;
                cnt[r][g[i] ^ g[j]]--;
            }
        }
    }

    cerr << "M: " << *max_element(all(g)) << endl;

    vector <double> acc1(al.size() + 1);
    vector <double> acc2(al.size() + 1);

    for (int i = 0; i + 1 < al.size(); ++i) {
        for (int j = 0; j + 1 < al.size(); ++j) {
            if (g[i] != g[j]) continue;

            {
                auto p = (al[i] + al[j] + one).getPos();
                acc1[p] += 1;
                p = (al[i + 1] + al[j] + one).getPos();
                acc1[p] -= 1;
                p = (al[i] + al[j + 1] + one).getPos();
                acc1[p] -= 1;
                p = (al[i + 1] + al[j + 1] + one).getPos();
                acc1[p] += 1;
            }

            {
                auto p = (al[i] + al[j] + sq2).getPos();
                acc2[p] += 1;
                p = (al[i + 1] + al[j] + sq2).getPos();
                acc2[p] -= 1;
                p = (al[i] + al[j + 1] + sq2).getPos();
                acc2[p] -= 1;
                p = ( al[i + 1] + al[j + 1] + sq2).getPos();
                acc2[p] += 1;
            }
        }
    }

    double speed1 = 0;
    double speed2 = 0;

    double value1 = 0;
    double value2 = 0;

    for (int i = 0; i + 1 < al.size(); ++i) {
        speed1 += acc1[i];
        speed2 += acc2[i];

        if (al[i + 1].value() >= MIN && al[i].value() <= MAX) {
            double x = min(MAX, al[i + 1].value());

//            assert(abs((value1 + speed1 * (x - al[i].value())) / (x - one.value()) - 1) < 1e-9);
//            assert(abs((value2 + speed2 * (x - al[i].value())) / (x - sq2.value()) - 1) < 1e-9);
            double res = 0.5 * (value1 + speed1 * (x - al[i].value())) / (x - one.value())
                    + 0.5 * (value2 + speed2 * (x - al[i].value())) / (x - sq2.value());
//            cerr << x << " " << res * x << endl;

            if (uax(best, res * x)) {
                best_pos = x;
            }
        }

        value1 += speed1 * (al[i + 1].value() - al[i].value());
        value2 += speed2 * (al[i + 1].value() - al[i].value());
    }

    cout << setprecision(8) << fixed;

    cout << best << " " << best_pos << endl;

}

int main(int argc, char **argv) {
#ifdef LOCAL
    freopen("input.txt", "r", stdin);
//    freopen("output.txt", "w", stdout);
#else
    #define fname "sequence"
    //freopen(fname".in", "r", stdin);
    //freopen(fname".out", "w", stdout);
#endif
    ::TTT = 1;

    pre();

    for (int test = 1; test <= ::TTT; ++test) {
        solve(test);
    }
#ifdef LOCAL
    cerr << "Time elapsed: " << 1.0 * clock() / CLOCKS_PER_SEC * 1000 << " ms." << endl;
#endif
    return 0;
}

template<typename T>
T gcd(T x, T y) {
    while (y > 0) {
        x %= y;
        swap(x, y);
    }
    return x;
}

template<class T>
T lcm(T a, T b) {
    return a / gcd(a, b) * b;
}

template<class _T>
inline _T sqr(const _T &x) {
    return x * x;
}

template<class _T>
inline string tostr(const _T &a) {
    ostringstream os("");
    os << a;
    return os.str();
}

template<typename T>
inline void input(T &a) {
    static int ed;
    a = 0;
    while (!isdigit(ed = getchar()) && ed != '-') {}
    char neg = 0;
    if (ed == '-') {
        neg = 1;
        ed = getchar();
    }
    while (isdigit(ed)) {
        a = 10 * a + ed - '0';
        ed = getchar();
    }
    if (neg) a = -a;
}

template<typename T>
inline T nxt() {
    T res;
    input(res);
    return res;
}

void myassert(bool v) {
    assert(v);
//cout << "FAIL\n";
//exit(0);
}


bool checkp(long long v) {
    if (v < 2) return false;
    for (long long i = 2; i * i <= v; ++i) {
        if (v % i == 0) {
            return false;
        }
    }
    return true;
}

template<typename T, typename N>
T pw(T a, N n, T m) {
    T res = 1;
    while (n) {
        if (n & 1) {
            res = res * a % m;
        }
        a = a * a % m;
        n >>= 1;
    }
    return res;
}

template<typename T>
T inv(T a, T p) {
    T res = 1;
    while (a > 1) {
        res = res * (p - p / a) % p;
        a = p % a;
    }
    return res;
}

template<class T>
bool uin(T &a, const T &b) {
    if (b < a) {
        a = b;
        return true;
    }
    return false;
}

template<class T>
bool uax(T &a, const T &b) {
    if (b > a) {
        a = b;
        return true;
    }
    return false;
}






