package main

import (
	"bufio"
	"flag"
	"fmt"
	"io"
	"math/big"
	"os"
)

type data struct {
	prefix int64
	suffix int64
	total  int64
	answer int64
}

func newData(x int64) data {
	return data{
		prefix: MaxInt64(0, x),
		suffix: MaxInt64(0, x),
		total:  x,
		answer: x,
	}
}

func (l data) Add(r data) data {
	return data{
		prefix: MaxInt64(l.prefix, l.total+r.prefix),
		suffix: MaxInt64(r.suffix, l.suffix+r.total),
		total:  l.total + r.total,
		answer: MaxInt64(l.answer, MaxInt64(r.answer, l.suffix+r.prefix)),
	}
}

type trib struct {
	t0 int
	t1 int
	t2 int

	mod int
}

func newTrib(n int) *trib {
	return &trib{
		t0:  0,
		t1:  -1,
		t2:  1,
		mod: n,
	}
}

func (t *trib) next() int {
	res := (t.t0 + t.t1 + t.t2) % t.mod
	t.t0, t.t1, t.t2 = t.t1, t.t2, res

	return res
}

func main() {
	defer writer.Flush()

	n := 10000003

	N := 1
	for ; N < n; N *= 2 {
	}

	st := make([]data, 2*N)

	t := newTrib(n)

	steps := 10000000

	a := make([]int, n)

	answer := int64(0)

	for i := 0; i < steps; i++ {
		p1 := t.next()
		p2 := t.next()

		a[p1] = a[p1] + 2 * p2 - n + 1

		p := p1 + N
		st[p] = newData(int64(a[p1]))

		for p >>= 1; p > 0; p >>= 1 {
			st[p] = st[p + p].Add(st[p + p + 1])
		}

		answer += st[1].answer
	}

	println(answer)
}

var reader *bufio.Reader
var writer *bufio.Writer

var inputFile = flag.String("input", "", "")

func init() {
	flag.Parse()
	var i io.Reader
	if *inputFile != "" {
		i, _ = os.Open(*inputFile)
	} else {
		i = os.Stdin
	}
	reader = bufio.NewReaderSize(i, 1<<20)
	writer = bufio.NewWriterSize(os.Stdout, 1<<20)
}

func println(a ...interface{}) {
	_, _ = fmt.Fprintln(writer, a...)
}

func printf(format string, a ...interface{}) {
	_, _ = fmt.Fprintf(writer, format, a...)
}

func scanf(format string, a ...interface{}) {
	_, _ = fmt.Fscanf(reader, format, a...)
}

func scan(a interface{}) {
	_, _ = fmt.Fscan(reader, a)
}

func NextInt64() int64 {
	var res int64
	scan(&res)
	return res
}

func NextInt() int {
	var res int
	scan(&res)
	return res
}

func NextIntArray(n int) []int {
	res := make([]int, n)
	for i := range res {
		scan(&res[i])
	}
	return res
}

func NextInt64Array(n int) []int64 {
	res := make([]int64, n)
	for i := range res {
		scan(&res[i])
	}
	return res
}

func NextString() string {
	var res string
	scan(&res)
	return res
}

func NextBigInt() *big.Int {
	n := new(big.Int)
	n, _ = n.SetString(NextString(), 10)
	return n
}

func AbsInt64(x int64) int64 {
	if x < 0 {
		return -x
	}
	return x
}

func MinInt64(x, y int64) int64 {
	if x < y {
		return x
	}
	return y
}

func MaxInt64(x, y int64) int64 {
	if x > y {
		return x
	}
	return y
}

func MaxInt(x, y int) int {
	if x > y {
		return x
	}
	return y
}
