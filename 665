package main

import (
	"bufio"
	"flag"
	"fmt"
	"io"
	"math"
	"math/big"
	"os"
)

const mod = 1000000087

type state struct {
	m    map[int]struct{}
	l, r int
}

func newState() *state {
	return &state{
		m: make(map[int]struct{}),
		l: 1,
		r: -1,
	}
}

func (s *state) check(x int) bool {
	if x >= s.l && x <= s.r {
		return false
	}
	_, ok := s.m[x]
	return !ok
}

func (s *state) add(x int) {
	s.m[x] = struct{}{}
	for {
		if _, ok := s.m[s.l-1]; !ok {
			break
		}
		s.l--
	}

	for {
		if _, ok := s.m[s.r+1]; !ok {
			break
		}
		s.r++
	}
}

func solve() {
	xy := newState()  // x - y
	yy := newState()  // y
	x2y := newState() // x - 2 * y
	y2x := newState() // y - 2 * x

	xy.add(0)
	yy.add(0)
	x2y.add(0)
	y2x.add(0)

	M := 10000000

	answer := int64(0)

	for i := 1; 2*i <= M; i++ {
		x := i
		candidates := make(map[int]struct{}, 27 * 8)

		for delta := -1; delta <= 25; delta++ {
			candidates[x-(xy.l-1)+delta] = struct{}{}
			candidates[x-(xy.r+1)-delta] = struct{}{}

			candidates[(x-(x2y.l-1))/2+delta] = struct{}{}
			candidates[(x-(x2y.r+1))/2-delta] = struct{}{}

			candidates[2*x+y2x.l-1-delta] = struct{}{}
			candidates[2*x+y2x.r+1+delta] = struct{}{}

			candidates[yy.l-1-delta] = struct{}{}
			candidates[yy.r+1+delta] = struct{}{}
		}

		fy := math.MaxInt32

		for y := range candidates {
			if y >= 0 && y < fy && xy.check(x-y) && yy.check(y) && x2y.check(x-2*y) && y2x.check(y-2*x) {
				fy = y
			}
		}

		if fy == -1 {
			panic(fy)
		}

		xy.add(x - fy)
		yy.add(fy)
		x2y.add(x - 2*fy)
		y2x.add(fy - 2*x)

		if x <= fy && x+fy <= M {
			answer += int64(x + fy)
		}

		if x%100000 == 0 {
			print(x, "\n")
		}
	}

	// 11541714606989
	println(answer)

}

func main() {
	defer writer.Flush()

	solve()
	return

	N := 700

	d := make([][]bool, N)

	for i := 0; i < N; i++ {
		d[i] = make([]bool, N)
	}

	for i := 0; i < N; i++ {
		has_0 := false
		for j := 0; j < N; j++ {
			for k := 1; (k <= i || k <= j) && !d[i][j]; k++ {
				switch true {
				case i >= k && !d[i-k][j],
					j >= k && !d[i][j-k],
					i >= k && j >= k && !d[i-k][j-k],
					i >= 2*k && j >= k && !d[i-2*k][j-k],
					i >= k && j >= 2*k && !d[i-k][j-2*k]:
					d[i][j] = true
				}
			}
			if !d[i][j] {

				println(i, j, j-i, j-2*i, 2*j-i)
				// println(i, j)

				has_0 = true
			}
		}
		if !has_0 {
			// println("!!!! ", i)
		}
	}

}

var reader *bufio.Reader
var writer *bufio.Writer

var inputFile = flag.String("input", "", "")

func init() {
	flag.Parse()
	var i io.Reader
	if *inputFile != "" {
		i, _ = os.Open(*inputFile)
	} else {
		i = os.Stdin
	}
	reader = bufio.NewReaderSize(i, 1<<20)
	writer = bufio.NewWriterSize(os.Stdout, 1<<20)
}

func println(a ...interface{}) {
	_, _ = fmt.Fprintln(writer, a...)
}

func printf(format string, a ...interface{}) {
	_, _ = fmt.Fprintf(writer, format, a...)
}

func scanf(format string, a ...interface{}) {
	_, _ = fmt.Fscanf(reader, format, a...)
}

func scan(a interface{}) {
	_, _ = fmt.Fscan(reader, a)
}

func NextInt64() int64 {
	var res int64
	scan(&res)
	return res
}

func NextInt() int {
	var res int
	scan(&res)
	return res
}

func NextIntArray(n int) []int {
	res := make([]int, n)
	for i := range res {
		scan(&res[i])
	}
	return res
}

func NextInt64Array(n int) []int64 {
	res := make([]int64, n)
	for i := range res {
		scan(&res[i])
	}
	return res
}

func NextString() string {
	var res string
	scan(&res)
	return res
}

func NextBigInt() *big.Int {
	n := new(big.Int)
	n, _ = n.SetString(NextString(), 10)
	return n
}

func AbsInt64(x int64) int64 {
	if x < 0 {
		return -x
	}
	return x
}

func MinInt64(x, y int64) int64 {
	if x < y {
		return x
	}
	return y
}

func MaxInt64(x, y int64) int64 {
	if x > y {
		return x
	}
	return y
}

func MaxInt(x, y int) int {
	if x > y {
		return x
	}
	return y
}
