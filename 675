package main

import (
	"bufio"
	"flag"
	"fmt"
	"io"
	"math/big"
	"os"
)

const mod = 1000000087

func main() {
	defer writer.Flush()

	N := 10000000

	lp := make([]int, N + 1)

	e := make([][]int, N + 1)

	d := make([]int, N + 1)

	r := make([]int64, 3 * N + 1)

	r[1] = 1

	for i := int64(2); i <= int64(3 * N); i++ {
		r[i] = (mod - mod / i) * r[mod % i] % mod
	}

	for i := 2; i <= N; i++ {
		if lp[i] == 0 {
			for j := i; j <= N; j += i {
				lp[j] = i
			}
			k := i

			for {
				for j := k; j <= N; j += k {
					e[j] = append(e[j], i)
				}

				if float64(k) * float64(i) > 2 * float64(N) {
					break
				}

				k *= i
			}
		}
	}

	cur := int64(1)
	answer := int64(0)

	for i := 2; i <= N; i++ {
		for _, p := range e[i] {
			cur = cur * r[2 * d[p] + 1] % mod
			d[p] += 1
			cur = cur * int64(2 * d[p] + 1) % mod
		}
		answer += cur
		answer %= mod
	}
	println(answer)
}

var reader *bufio.Reader
var writer *bufio.Writer

var inputFile = flag.String("input", "", "")

func init() {
	flag.Parse()
	var i io.Reader
	if *inputFile != "" {
		i, _ = os.Open(*inputFile)
	} else {
		i = os.Stdin
	}
	reader = bufio.NewReaderSize(i, 1<<20)
	writer = bufio.NewWriterSize(os.Stdout, 1<<20)
}

func println(a ...interface{}) {
	_, _ = fmt.Fprintln(writer, a...)
}

func printf(format string, a ...interface{}) {
	_, _ = fmt.Fprintf(writer, format, a...)
}

func scanf(format string, a ...interface{}) {
	_, _ = fmt.Fscanf(reader, format, a...)
}

func scan(a interface{}) {
	_, _ = fmt.Fscan(reader, a)
}

func NextInt64() int64 {
	var res int64
	scan(&res)
	return res
}

func NextInt() int {
	var res int
	scan(&res)
	return res
}

func NextIntArray(n int) []int {
	res := make([]int, n)
	for i := range res {
		scan(&res[i])
	}
	return res
}

func NextInt64Array(n int) []int64 {
	res := make([]int64, n)
	for i := range res {
		scan(&res[i])
	}
	return res
}

func NextString() string {
	var res string
	scan(&res)
	return res
}

func NextBigInt() *big.Int {
	n := new(big.Int)
	n, _ = n.SetString(NextString(), 10)
	return n
}

func AbsInt64(x int64) int64 {
	if x < 0 {
		return -x
	}
	return x
}

func MinInt64(x, y int64) int64 {
	if x < y {
		return x
	}
	return y
}

func MaxInt64(x, y int64) int64 {
	if x > y {
		return x
	}
	return y
}

func MaxInt(x, y int) int {
	if x > y {
		return x
	}
	return y
}
